{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Respondent/Respondent.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/Respondent/Respondent.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","redux/dialogs/selector.ts","redux/friends/selector.ts","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Respondent","id","owner","avatar","name","EmptyAvatar","path","useRouteMatch","className","classes","respondent","to","src","alt","Message","message","message_own","undefined","DialogsReduxForm","reduxForm","form","handleSubmit","onSubmit","createField","Textarea","required","maxLength30","type","Dialogs","dialogsPage","messagesData","dialogsData","friends","sendMessage","messagesElements","map","ownerId","find","dialogsElements","dialogs","respondents","messages","newMessage","formData","getDialogsPageState","state","getFriendsState","methods","actions","connector","connect","compose"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,SAAW,0BAA0B,WAAa,8B,oBCAlJD,EAAOC,QAAU,CAAC,WAAa,iC,oBCA/BD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,+B,gICwBpDC,EAZqB,SAAC,GAAiF,IAA9EC,EAA6E,EAA7EA,GAA6E,IAAzEC,MAASC,GAAgE,aAA/C,CAAEC,KAAM,SAAUD,OAAQE,KAAqB,GAAhEF,OAAQC,EAAwD,EAAxDA,KACnDE,EAASC,cAATD,KACR,OACE,qBAAKE,UAAYC,IAAQC,WAAzB,SACE,eAAC,IAAD,CAASC,GAAE,UAAOL,EAAP,YAAiBL,GAA5B,UACE,qBAAKW,IAAMT,EAASU,IAAI,wBACtBT,Q,kBCGKU,EAVkB,SAAC,GAA0E,IAAxEC,EAAuE,EAAvEA,QAAuE,IAA9Db,MAASD,GAAqD,aAAtC,CAAEA,IAAK,EAAGE,OAAQE,KAAoB,GAArDJ,GAAIE,EAAiD,EAAjDA,OAExD,OACE,sBAAKK,UAAS,UAAKC,IAAQM,QAAb,YAA+B,IAAPd,EAAWQ,IAAQO,iBAAcC,GAAvE,UACE,qBAAKL,IAAKT,EAAQU,IAAI,wBACrBE,M,yBCeDG,EAAmBC,YAA4B,CACnDC,KAAM,cADiBD,EATY,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aACtC,OACE,uBAAMC,SAAUD,EAAhB,UACGE,YAAkC,aAAcC,IAAU,CAACC,IAAUC,KAAc,sBACpF,wBAAQC,KAAK,SAAb,wBA0DSC,EAjDkB,SAAC,GAA0E,IAAD,IAAvEC,YAAeC,EAAwD,EAAxDA,aAAcC,EAA0C,EAA1CA,YAAeC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YAEjFC,EAAmBJ,EAAaK,KAAI,YAA+B,IACnEjC,EADuCkC,EAA2B,EAA3BA,QAASnC,EAAkB,EAAlBA,GAAIc,EAAc,EAAdA,QAWxD,OAREb,EADc,IAAZkC,EACM,CACNnC,GAAQ,EACRE,OAAQ,mKAIF6B,EAAQK,MAAK,qBAAGpC,KAAgCmC,KAGxD,6BACE,cAAC,EAAD,CAASrB,QAASA,EAASb,MAAOA,KAD3BD,MAMPqC,EAAkBP,EAAYI,KAAI,YAAsB,IAAnBlC,EAAkB,EAAlBA,GAAImC,EAAc,EAAdA,QACvClC,EAAQ8B,EAAQK,MAAK,qBAAGpC,KAAgCmC,KAC9D,OACE,6BACE,cAAC,EAAD,CAAYnC,GAAIA,EAAIC,MAAOA,KADpBD,MAWb,OACE,0BAASO,UAAWC,IAAQ8B,QAA5B,UACE,oBAAI/B,UAAWC,IAAQ+B,YAAvB,SACGF,IAEH,oBAAI9B,UAAWC,IAAQgC,SAAvB,SACGP,IAEH,qBAAK1B,UAAWC,IAAQiC,WAAxB,SACE,cAACxB,EAAD,CAAkBI,SAdE,SAACqB,GACzB,IAAQD,EAAeC,EAAfD,WACRT,EAAYS,Y,gBCjEHE,EAAsB,SAACC,GAAD,OAAyBA,EAAMhB,aCArDiB,EAAkB,SAACD,GAAD,OAAyBA,EAAMb,SC0BxDe,EAAyB,CAC7Bd,YAAae,IAAQf,aAGjBgB,EAAYC,aAXM,SAACL,GACvB,MAAO,CACLhB,YAAae,EAAoBC,GACjCb,QAAac,EAAgBD,MAQ6DE,GAE/EI,sBACbF,EADaE,CAEbvB","file":"static/js/4.619e5f65.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2A6Z2\",\"respondents\":\"Dialogs_respondents__2NqRr\",\"messages\":\"Dialogs_messages__phwQK\",\"newMessage\":\"Dialogs_newMessage__2aI-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"respondent\":\"Respondent_respondent__-sSUj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__25nsD\",\"message_own\":\"Message_message_own__VTKqp\"};","import React from 'react';\r\nimport classes from './Respondent.module.css';\r\nimport { NavLink, useRouteMatch } from 'react-router-dom';\r\nimport EmptyAvatar from '../../../images/empty_avatar.svg';\r\n\r\ninterface Props {\r\n  id: number;\r\n  owner?: {\r\n    name: string;\r\n    avatar: string;\r\n  }\r\n}\r\n\r\nconst Respondent: React.FC<Props> = ( { id, owner: { avatar, name } = { name: 'NoName', avatar: EmptyAvatar } } ) => {\r\n  const { path } = useRouteMatch();\r\n  return (\r\n    <div className={ classes.respondent }>\r\n      <NavLink to={ `${ path }/${ id }` }>\r\n        <img src={ avatar } alt=\"respondent's avatar\"/>\r\n        { name }\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Respondent;\r\n","import React from 'react';\r\nimport classes from './Message.module.css';\r\nimport EmptyAvatar from '../../../images/empty_avatar.svg';\r\n\r\ninterface Props {\r\n  message: string;\r\n  owner?: {\r\n    id: number;\r\n    avatar: string;\r\n  }\r\n}\r\n\r\nconst Message: React.FC<Props> = ({ message, owner: { id, avatar } = { id: -1, avatar: EmptyAvatar } }) => {\r\n\r\n  return (\r\n    <div className={`${classes.message} ${id === 1 ? classes.message_own : undefined}`}>\r\n      <img src={avatar} alt=\"respondent's avatar\"/>\r\n      {message}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport Respondent from './Respondent/Respondent';\r\nimport Message from './Message/Message';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, Textarea } from '../common/FormsControls/FormsControls';\r\nimport { maxLength30, required } from '../../utils/validators';\r\nimport { InitialState as DialogsState } from '../../redux/dialogs/reducer';\r\nimport { InitialState as FriendsState } from '../../redux/friends/reducer';\r\n\r\ninterface Props {\r\n  dialogsPage: DialogsState;\r\n  friends: FriendsState;\r\n  sendMessage: (newMessage: string) => void;\r\n}\r\n\r\ninterface DialogsFormProps {\r\n  newMessage: string;\r\n}\r\n\r\ntype DialogsFormType = React.FC<InjectedFormProps<DialogsFormProps>>\r\ntype DialogsFormDataNames = Extract<keyof DialogsFormProps, string>\r\n\r\nconst DialogsForm: DialogsFormType = ({ handleSubmit }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {createField<DialogsFormDataNames>('newMessage', Textarea, [required, maxLength30], 'Write your message')}\r\n      <button type=\"submit\">Send</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst DialogsReduxForm = reduxForm<DialogsFormProps>({\r\n  form: 'newMessage',\r\n})(DialogsForm);\r\n\r\nconst Dialogs: React.FC<Props> = ({ dialogsPage: { messagesData, dialogsData }, friends, sendMessage }) => {\r\n\r\n  const messagesElements = messagesData.map(({ ownerId, id, message }) => {\r\n    let owner;\r\n    if (ownerId === 1) {\r\n      owner = {\r\n        id:     1,\r\n        avatar: 'https://sun3-12.userapi.com/impf/c850220/v850220643/1cf89f/09Ze66DlRZ8.jpg?size=200x0&quality=96&crop=0,0,1440,2160&sign=f5a0c1a46079ef18be3b6f634672bd5d&ava=1',\r\n      };\r\n    }\r\n    else {\r\n      owner = friends.find(({ id: friendId }) => friendId === ownerId);\r\n    }\r\n    return (\r\n      <li key={id}>\r\n        <Message message={message} owner={owner}/>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  const dialogsElements = dialogsData.map(({ id, ownerId }) => {\r\n    const owner = friends.find(({ id: friendId }) => friendId === ownerId);\r\n    return (\r\n      <li key={id}>\r\n        <Respondent id={id} owner={owner}/>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  const handleSendMessage = (formData: DialogsFormProps) => {\r\n    const { newMessage } = formData;\r\n    sendMessage(newMessage);\r\n  };\r\n\r\n  return (\r\n    <section className={classes.dialogs}>\r\n      <ul className={classes.respondents}>\r\n        {dialogsElements}\r\n      </ul>\r\n      <ul className={classes.messages}>\r\n        {messagesElements}\r\n      </ul>\r\n      <div className={classes.newMessage}>\r\n        <DialogsReduxForm onSubmit={handleSendMessage}/>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import { AppStateType } from '../redux-store';\r\n\r\nexport const getDialogsPageState = (state: AppStateType) => state.dialogsPage;\r\n","import { AppStateType } from '../redux-store';\r\n\r\nexport const getFriendsState = (state: AppStateType) => state.friends;\r\n","import { InitialState as DialogsInitialState, ActionsType, actions } from '../../redux/dialogs/reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { getDialogsPageState } from '../../redux/dialogs/selector';\r\nimport { getFriendsState } from '../../redux/friends/selector';\r\nimport { InitialState as FriendsInitialState } from '../../redux/friends/reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ninterface StateProps {\r\n  dialogsPage: DialogsInitialState;\r\n  friends: FriendsInitialState;\r\n}\r\n\r\ninterface DispatchProps {\r\n  sendMessage: (newMessage: string) => ActionsType;\r\n}\r\n\r\ninterface OwnProps {\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): StateProps => {\r\n  return {\r\n    dialogsPage: getDialogsPageState(state),\r\n    friends:     getFriendsState(state),\r\n  };\r\n};\r\n\r\nconst methods: DispatchProps = {\r\n  sendMessage: actions.sendMessage,\r\n};\r\n\r\nconst connector = connect<StateProps, DispatchProps, OwnProps, AppStateType>(mapStateToProps, methods);\r\n\r\nexport default compose(\r\n  connector,\r\n)(Dialogs);\r\n"],"sourceRoot":""}