{"version":3,"sources":["redux/dialogs/reducer.ts","redux/friends/selector.ts","components/common/FormsControls/FormsControls.tsx","api/usersAPI.ts","utils/helpers.ts","redux/users/reducer.ts","components/SideBar/Friends/Friends.module.css","components/SideBar/Friends/FriendMini/FriendMini.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","api/api.ts","components/Navbar/Navbar.module.css","utils/validators/index.ts","api/securityAPI.ts","reportWebVitals.js","api/profileAPI.ts","redux/profile/reducer.ts","redux/friends/reducer.ts","api/authApi.ts","redux/auth/reducer.ts","redux/app/reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/SideBar/Friends/FriendMini/FriendMini.tsx","components/SideBar/Friends/Friends.tsx","components/SideBar/SideBar.tsx","components/SideBar/SideBarContainer.tsx","redux/profile/selector.ts","redux/auth/selector.ts","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","images/logo.svg","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","hoc/ProtectedRoute.tsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx","redux/app/selector.ts","hoc/withSuspense.tsx","components/App/App.tsx","index.tsx","images/loader.gif","components/common/Preloader/Preloader.tsx","utils/constants.ts","components/Header/Header.module.css","components/SideBar/SideBar.module.css","components/common/FormsControls/FormsControls.module.css","components/Profile/ProfileInfo/ProfileData/ProfileData.module.css","components/Login/Login.module.css","images/empty_avatar.svg"],"names":["initialState","dialogsData","id","name","ownerId","messagesData","message","actions","sendMessage","newMessage","type","reducer","state","action","getFriendsState","friends","FromControl","meta","valid","touched","error","children","hasError","className","classes","control","control__message","Textarea","props","input","rest","Input","createField","component","validate","placeholder","page","pageSize","this","_instance","get","post","delete","API","updateObjectInArray","arr","keyId","valueId","newProps","map","item","users","usersCount","currentPage","isFetching","isTogglingFollowUsers","userId","getUsers","dispatch","a","usersAPI","data","totalCount","items","console","log","toggleFollow","actionCreator","apiMethod","resultCode","ResultCode","Error","messages","follow","bind","unfollow","followed","filter","module","exports","axios","create","baseURL","API_SAMURAI_SETTINGS","baseUrl","withCredentials","headers","token","max","required","value","undefined","maxLength30","length","ResultCodeCaptcha","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","status","put","image","formData","FormData","append","profileData","postsData","userInfo","userStatus","isValid","addPost","newPost","removePost","index","setUserInfo","setUserStatus","setUserPhotos","userPhotos","setIsValid","photos","avatar","email","login","isAuth","captchaUrl","url","authorize","authApi","auth","getCaptcha","securityAPI","initialized","reducers","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","friendsReducer","usersPage","usersReducer","authReducer","form","formReducer","app","appReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","Navbar","nav","list","activeClassName","item_active","to","href","FriendMini","src","alt","Friends","friendsElements","SideBar","side","title","SideBarContainer","connect","connector","getUserInfoState","getUserStatusState","getPostsData","getIsValid","getEmailState","getLoginState","getUserIdState","getIsAuthState","getCaptchaUrlState","ProfileStatus","updateUserStatus","useState","editMode","setEditMode","statusState","setStatusState","useEffect","deactivateEditMode","onBlur","onKeyUp","e","key","KEY_ENTER","onChange","currentTarget","autoFocus","onClick","ProfileDataReduxForm","reduxForm","handleSubmit","initialValues","onSubmit","contacts","Object","keys","form__error","ProfileDataInfo","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","entries","ProfileData","updateUserData","ProfileInfo","isOwner","updateUserPhoto","info__avatar","large","emptyAvatar","target","files","Preloader","Post","MyPostsReduxForm","MyPosts","React","memo","postsElements","methods","MyPostsContainer","Profile","mapDispatchToProps","getUserInfo","profileAPI","getProfileData","getUserStatus","getStatus","setStatus","Success","setPhoto","userData","setProfileData","errors","reduce","split","element","slice","res","toLowerCase","stopSubmit","ProfileContainer","_refreshProfileInfo","history","match","params","push","prevProps","Component","withRouter","Header","logout","header","logo","header__logo","header__nav","HeaderContainer","ProtectedRoute","path","render","condition","LoginReduxForm","Login","useHistory","password","rememberMe","captcha","Captcha","_error","LoginContainer","getInitializedState","withSuspense","fallback","DialogsContainer","lazy","UsersContainer","initializing","Dialogs","Users","App","exact","from","ReactDOM","StrictMode","document","getElementById","preloader"],"mappings":"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","file":"static/js/main.e698a715.chunk.js","sourcesContent":["import { BaseActionType } from '../redux-store';\r\n\r\nexport type InitialState = typeof initialState;\r\nexport type ActionsType = BaseActionType<typeof actions>;\r\n\r\nconst initialState = {\r\n  dialogsData:  [\r\n    {\r\n      id:      11,\r\n      name:    'Pety',\r\n      ownerId: 2,\r\n    },\r\n    {\r\n      id:      12,\r\n      name:    'Vany',\r\n      ownerId: 3,\r\n    },\r\n    {\r\n      id:      13,\r\n      name:    'Sasha',\r\n      ownerId: 4,\r\n    },\r\n  ],\r\n  messagesData: [\r\n    {\r\n      id:      1,\r\n      message: 'Hello',\r\n      ownerId: 1,\r\n    },\r\n    {\r\n      id:      2,\r\n      message: 'How are you',\r\n      ownerId: 2,\r\n    },\r\n    {\r\n      id:      3,\r\n      message: 'Buy',\r\n      ownerId: 2,\r\n    },\r\n  ],\r\n};\r\n\r\nconst reducer = (state = initialState, action: ActionsType) => {\r\n  switch (action.type) {\r\n    case 'social-network/dialogs/SEND_MESSAGE': {\r\n      return {\r\n        ...state,\r\n        messagesData: [...state.messagesData, { id: 7, message: action.newMessage, ownerId: 1 }],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  sendMessage: (newMessage: string) => ({ type: 'social-network/dialogs/SEND_MESSAGE', newMessage } as const)\r\n};\r\n\r\nexport default reducer;\r\n","import { AppStateType } from '../redux-store';\r\n\r\nexport const getFriendsState = (state: AppStateType) => state.friends;\r\n","import classes from './FormsControls.module.css';\r\nimport React from 'react';\r\nimport { Field, WrappedFieldProps } from 'redux-form';\r\nimport { InputType } from 'zlib';\r\nimport { Validator } from 'redux-form/lib/Field';\r\n\r\nconst FromControl: React.FC<WrappedFieldProps> = ({ meta: { valid, touched, error }, children }) => {\r\n  const hasError = !valid && touched;\r\n  return (\r\n    <div className={classes.control}>\r\n      {children}\r\n      {hasError && <span className={classes.control__message}>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...rest } = props;\r\n\r\n  return (\r\n    <FromControl {...props}><textarea {...input} {...rest}/></FromControl>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...rest } = props;\r\n\r\n  return (\r\n    <FromControl {...props}><input {...input} {...rest}/></FromControl>\r\n  );\r\n};\r\n\r\nexport function createField<FieldNames extends string> (name: FieldNames, component: React.FC<WrappedFieldProps>, validate: Array<Validator> = [], placeholder: string = '', type: InputType = '') {\r\n  return <Field name={name}\r\n                placeholder={placeholder}\r\n                component={component}\r\n                validate={validate}\r\n                type={type}/>;\r\n}\r\n","import API, { ApiResponse } from './api';\r\nimport { AxiosResponse } from 'axios';\r\nimport { UserType } from '../types';\r\n\r\ninterface GetUsersResponse {\r\n  items: UserType[];\r\n  totalCount: number;\r\n  error: null | string\r\n}\r\n\r\nclass UsersAPI extends API {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  getUsers( page: number, pageSize: number ): Promise<AxiosResponse<GetUsersResponse>> {\r\n    return this._instance.get( `/users?count=${ pageSize }&page=${ page }` );\r\n  }\r\n\r\n  follow( id: string ): Promise<AxiosResponse<ApiResponse>> {\r\n    return this._instance.post( `/follow/${ id }`, {} );\r\n  }\r\n\r\n  unfollow( id: string ): Promise<AxiosResponse<ApiResponse>> {\r\n    return this._instance.delete( `/follow/${ id }` );\r\n  }\r\n}\r\n\r\nexport default new UsersAPI();\r\n","export const updateObjectInArray = ( arr: Array<any>, keyId: string, valueId: string, newProps: any ) => {\r\n  return arr.map( item => item[keyId] === valueId ? { ...item, ...newProps } : item );\r\n};\r\n","import usersAPI from '../../api/usersAPI';\r\nimport { updateObjectInArray } from '../../utils/helpers';\r\nimport { UserType } from '../../types';\r\nimport { BaseThunkType, BaseActionType } from '../redux-store';\r\nimport { Dispatch } from 'redux';\r\nimport { AxiosResponse } from 'axios';\r\nimport { ApiResponse, ResultCode } from '../../api/api';\r\n\r\nexport type InitialState = typeof initialState;\r\nexport type ThunkType = BaseThunkType<ActionsType>\r\ntype ActionsType = BaseActionType<typeof actions>;\r\n\r\nconst initialState = {\r\n  users:                 [] as Array<UserType>,\r\n  usersCount:            20,\r\n  pageSize:              5,\r\n  currentPage:           0,\r\n  isFetching:            false,\r\n  isTogglingFollowUsers: [] as Array<string>,\r\n};\r\n\r\nconst reducer = (state = initialState, action: ActionsType): InitialState => {\r\n  switch (action.type) {\r\n    case 'social-network/users/FOLLOW':\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, 'id', action.userId, { followed: true }),\r\n      };\r\n    case 'social-network/users/UNFOLLOW':\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, 'id', action.userId, { followed: false }),\r\n      };\r\n    case 'social-network/users/SET_USERS':\r\n      return {\r\n        ...state,\r\n        users: action.users,\r\n      };\r\n    case 'social-network/users/SET_USERS_COUNT':\r\n      return {\r\n        ...state,\r\n        usersCount: action.usersCount,\r\n      };\r\n    case 'social-network/users/SET_CURRENT_PAGE':\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    case 'social-network/users/SET_IS_FETCHING':\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      };\r\n    case 'social-network/users/SET_IS_TOGGLING_FOLLOW_USERS':\r\n      return {\r\n        ...state,\r\n        isTogglingFollowUsers: action.isFetching\r\n                               ? [...state.isTogglingFollowUsers, action.userId]\r\n                               : state.isTogglingFollowUsers.filter(id => id !== action.userId),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  setFollow:           (userId: string) => ({ type: 'social-network/users/FOLLOW', userId, } as const),\r\n  setUnfollow:         (userId: string) => ({ type: 'social-network/users/UNFOLLOW', userId, } as const),\r\n  setUsers:            (users: Array<UserType>) => ({ type: 'social-network/users/SET_USERS', users, } as const),\r\n  setUsersCount:       (usersCount: number) => ({ type: 'social-network/users/SET_USERS_COUNT', usersCount, } as const),\r\n  setCurrentPage:      (currentPage: number) => ({\r\n    type: 'social-network/users/SET_CURRENT_PAGE',\r\n    currentPage,\r\n  } as const),\r\n  setIsFetching:       (isFetching: boolean) => ({\r\n    type: 'social-network/users/SET_IS_FETCHING',\r\n    isFetching,\r\n  } as const),\r\n  setIsTogglingFollow: (userId: string, isFetching: boolean) => ({\r\n    type: 'social-network/users/SET_IS_TOGGLING_FOLLOW_USERS',\r\n    userId,\r\n    isFetching,\r\n  } as const),\r\n};\r\n\r\nexport const getUsers = (page: number, pageSize: number): ThunkType => async (dispatch) => {\r\n  dispatch(actions.setIsFetching(true));\r\n  try {\r\n    const { data } = await usersAPI.getUsers(page + 1, pageSize);\r\n\r\n    dispatch(actions.setCurrentPage(page));\r\n    dispatch(actions.setUsersCount(data.totalCount));\r\n    dispatch(actions.setUsers(data.items));\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n  finally {\r\n    dispatch(actions.setIsFetching(false));\r\n  }\r\n};\r\n\r\nconst toggleFollow = async (\r\n  userId: string,\r\n  dispatch: Dispatch<ActionsType>,\r\n  actionCreator: (userId: string) => ActionsType,\r\n  apiMethod: (userId: string) => Promise<AxiosResponse<ApiResponse>>\r\n): Promise<void> => {\r\n  dispatch(actions.setIsTogglingFollow(userId, true));\r\n  try {\r\n    const { data } = await apiMethod(userId);\r\n\r\n    if (data.resultCode === ResultCode.Error) {\r\n      throw new Error(data.messages[0]);\r\n    }\r\n\r\n    dispatch(actionCreator(userId));\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n  finally {\r\n    dispatch(actions.setIsTogglingFollow(userId, false));\r\n  }\r\n};\r\n\r\nexport const follow = (id: string): ThunkType => async (dispatch) => toggleFollow(\r\n  id,\r\n  dispatch,\r\n  actions.setFollow,\r\n  usersAPI.follow.bind(usersAPI),\r\n);\r\n\r\nexport const unfollow = (id: string): ThunkType => async (dispatch) => toggleFollow(\r\n  id,\r\n  dispatch,\r\n  actions.setUnfollow,\r\n  usersAPI.unfollow.bind(usersAPI),\r\n);\r\n\r\nexport default reducer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Friends_list__3v20J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"FriendMini_item__bCYEg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info__avatar\":\"ProfileInfo_info__avatar__1kwos\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1_hh4\"};","import axios, { AxiosInstance } from 'axios';\r\nimport { API_SAMURAI_SETTINGS } from '../utils/constants';\r\n\r\nexport enum ResultCode {\r\n  Success = 0,\r\n  Error   = 1,\r\n}\r\n\r\nexport interface ApiResponse<D = {}, RC = ResultCode> {\r\n  resultCode: RC;\r\n  messages: string[];\r\n  data: D;\r\n}\r\n\r\nclass API {\r\n  protected _instance: AxiosInstance;\r\n\r\n  constructor () {\r\n    this._instance = axios.create({\r\n      baseURL:         API_SAMURAI_SETTINGS.baseUrl,\r\n      withCredentials: true,\r\n      headers:         {\r\n        'API-KEY': API_SAMURAI_SETTINGS.token,\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default API;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__22pHf\",\"list\":\"Navbar_list__Dorzm\",\"item\":\"Navbar_item__2UNvS\",\"item_active\":\"Navbar_item_active__33fC-\"};","const required = (value: any): string | void => value\r\n                                                ? undefined\r\n                                                : 'Required field';\r\n\r\nconst maxLength = (max: number) => (value: string): string | void => value && value.length > max\r\n                                                                     ? `Max length is ${max}`\r\n                                                                     : undefined;\r\n\r\nconst maxLength30 = maxLength(30);\r\n\r\nexport {\r\n  required,\r\n  maxLength,\r\n  maxLength30,\r\n};\r\n","import API from './api';\r\nimport { AxiosResponse } from 'axios';\r\n\r\nexport enum ResultCodeCaptcha {\r\n  Captcha = 10\r\n}\r\n\r\ninterface GetCaptchaResponse {\r\n  url: string;\r\n}\r\n\r\nclass SecurityAPI extends API {\r\n  constructor () {\r\n    super();\r\n  }\r\n\r\n  getCaptcha (): Promise<AxiosResponse<GetCaptchaResponse>> {\r\n    return this._instance.get(`/security/get-captcha-url`);\r\n  }\r\n}\r\n\r\nexport default new SecurityAPI();\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import API, { ApiResponse } from './api';\r\nimport { PhotosType, ProfileType } from '../types';\r\nimport { AxiosResponse } from 'axios';\r\n\r\ninterface SetPhotoResponseData {\r\n  photos: PhotosType;\r\n}\r\n\r\nclass ProfileAPI extends API {\r\n  constructor () {\r\n    super();\r\n  }\r\n\r\n  getProfileData (userId: string): Promise<AxiosResponse<ProfileType>> {\r\n    return this._instance.get(`/profile/${userId}`);\r\n  }\r\n\r\n  getStatus (userId: string): Promise<AxiosResponse<string>> {\r\n    return this._instance.get(`/profile/status/${userId}`);\r\n  }\r\n\r\n  setStatus (status: string): Promise<AxiosResponse<ApiResponse>> {\r\n    return this._instance.put('/profile/status', { status });\r\n  }\r\n\r\n  setPhoto (image: File): Promise<AxiosResponse<ApiResponse<SetPhotoResponseData>>> {\r\n    const formData = new FormData();\r\n    formData.append('image', image);\r\n\r\n    return this._instance.put('/profile/photo', formData);\r\n  }\r\n\r\n  setProfileData (profileData: ProfileType): Promise<AxiosResponse<ApiResponse>> {\r\n    return this._instance.put('/profile', profileData);\r\n  }\r\n}\r\n\r\nexport default new ProfileAPI();\r\n","import profileAPI from '../../api/profileAPI';\r\nimport { FormAction, stopSubmit } from 'redux-form';\r\nimport { PhotosType, PostType, ProfileType } from '../../types';\r\nimport { BaseActionType, BaseThunkType } from '../redux-store';\r\nimport { ResultCode } from '../../api/api';\r\n\r\nexport type InitialState = typeof initialState;\r\ntype ActionsType = BaseActionType<typeof actions>;\r\nexport type ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\ninterface ErrorsObject {\r\n  [key: string]: string | ErrorsObject;\r\n}\r\n\r\nconst initialState = {\r\n  postsData:  [\r\n                {\r\n                  id:      1,\r\n                  message: 'How are you?',\r\n                },\r\n                {\r\n                  id:      2,\r\n                  message: 'It is my first post',\r\n                },\r\n              ] as Array<PostType>,\r\n  userInfo:   null as Partial<ProfileType> | null,\r\n  userStatus: 'no status' as string,\r\n  isValid:    true,\r\n};\r\n\r\nconst reducer = (state = initialState, action: ActionsType): InitialState => {\r\n  switch (action.type) {\r\n    case 'social-network/profile/ADD_POST': {\r\n      return {\r\n        ...state,\r\n        postsData: [...state.postsData, { id: 5, message: action.newPost }],\r\n      };\r\n    }\r\n    case 'social-network/profile/REMOVE_POST': {\r\n      return {\r\n        ...state,\r\n        postsData: state.postsData.filter((item, index) => action.index !== index),\r\n      };\r\n    }\r\n    case 'social-network/profile/SET_USER_INFO': {\r\n      return {\r\n        ...state,\r\n        userInfo: action.userInfo,\r\n      };\r\n    }\r\n    case 'social-network/profile/SET_USER_STATUS': {\r\n      return {\r\n        ...state,\r\n        userStatus: action.userStatus,\r\n      };\r\n    }\r\n    case 'social-network/profile/SET_USER_PHOTOS': {\r\n      return {\r\n        ...state,\r\n        userInfo: {\r\n          ...state.userInfo,\r\n          photos: action.userPhotos,\r\n        },\r\n      };\r\n    }\r\n    case 'social-network/profile/SET_VALID': {\r\n      return {\r\n        ...state,\r\n        isValid: action.isValid\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  addPost:       (newPost: string) => ({ type: 'social-network/profile/ADD_POST', newPost } as const),\r\n  removePost:    (index: number) => ({ type: 'social-network/profile/REMOVE_POST', index } as const),\r\n  setUserInfo:   (userInfo: ProfileType) => ({ type: 'social-network/profile/SET_USER_INFO', userInfo } as const),\r\n  setUserStatus: (userStatus: string) => ({ type: 'social-network/profile/SET_USER_STATUS', userStatus } as const),\r\n  setUserPhotos: (userPhotos: PhotosType) => ({ type: 'social-network/profile/SET_USER_PHOTOS', userPhotos } as const),\r\n  setIsValid:    (isValid: boolean) => ({ type: 'social-network/profile/SET_VALID', isValid } as const),\r\n};\r\n\r\n\r\nexport const getUserInfo = (userId: string): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data } = await profileAPI.getProfileData(userId);\r\n\r\n    dispatch(actions.setUserInfo(data));\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getUserStatus = (userId: string): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data } = await profileAPI.getStatus(userId);\r\n\r\n    dispatch(actions.setUserStatus(data));\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const updateUserStatus = (status: string): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data } = await profileAPI.setStatus(status);\r\n\r\n    if (data.resultCode === ResultCode.Success) {\r\n      dispatch(actions.setUserStatus(status));\r\n    }\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const updateUserPhoto = (image: File): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data } = await profileAPI.setPhoto(image);\r\n\r\n    if (data.resultCode === ResultCode.Success) {\r\n      dispatch(actions.setUserPhotos(data.data.photos));\r\n    }\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const updateUserData = (userData: ProfileType): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data } = await profileAPI.setProfileData(userData);\r\n\r\n    if (data.resultCode === ResultCode.Success) {\r\n      const { data } = await profileAPI.getProfileData(userData.userId);\r\n      dispatch(actions.setIsValid(true));\r\n      dispatch(actions.setUserInfo(data));\r\n    }\r\n    else {\r\n      const errors = data.messages.reduce((errors: ErrorsObject, item: string) => {\r\n        dispatch(actions.setIsValid(false));\r\n        const [message, element] = item.split('(');\r\n        const elementRoute       = element.slice(0, element.length - 1).split('->');\r\n\r\n        elementRoute.reduce((res: ErrorsObject | string, item, index, arr) => {\r\n          if (typeof res === 'string') {\r\n            return {};\r\n          }\r\n\r\n          const key = item[0].toLowerCase() + item.slice(1);\r\n\r\n          if (key in res) {\r\n            return res[key];\r\n          }\r\n\r\n          res[key] = index < arr.length - 1 ? {} : message.slice(0, message.length - 1);\r\n\r\n          return res[key];\r\n        }, errors);\r\n\r\n\r\n        return errors;\r\n      }, {});\r\n\r\n      dispatch(stopSubmit('profileData', errors));\r\n    }\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","export type InitialState = typeof initialState;\r\n\r\nconst initialState = [\r\n  {\r\n    id: 2,\r\n    name: \"Pety\",\r\n    avatar: \"https://sun9-1.userapi.com/impf/c623226/v623226632/20ec3/wFW0LmxAF5E.jpg?size=1536x2048&quality=96&proxy=1&sign=3c23701904d2894bc56f0539b108dc64&type=album\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Vany\",\r\n    avatar: \"https://sun9-31.userapi.com/impf/K_i77x3c5rD-pxY1Hu_UzX7uaweHBadmZjnIUg/BaSOzQ1brCo.jpg?size=1620x2160&quality=96&proxy=1&sign=6977728d5d7739f0ff9bf4dd584c78c8&type=album0\",\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Sasha\",\r\n    avatar: \"https://sun9-29.userapi.com/impg/7pSRuhuz_LBQ1A7D-_eoWP0JyE8cMhl4NuHAiw/HuSEMS0th20.jpg?size=1906x2160&quality=96&proxy=1&sign=cc30984ecfe23af9466d513b63073748&type=album\",\r\n  },\r\n];\r\n\r\nconst reducer = (state = initialState, action: any): InitialState => {\r\n  switch (action) {\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import API, { ApiResponse, ResultCode } from './api';\nimport { ResultCodeCaptcha } from './securityAPI';\nimport { LoginPropsType } from '../types';\nimport { AxiosResponse } from 'axios';\n\ninterface LoginResponseData {\n  userId: string;\n}\n\ninterface AuthResponseData {\n  id: string;\n  email: string;\n  login: string;\n}\n\nclass AuthAPI extends API {\n  constructor () {\n    super();\n  }\n\n  login (data: LoginPropsType): Promise<AxiosResponse<ApiResponse<LoginResponseData, ResultCode | ResultCodeCaptcha>>> {\n    return this._instance.post('/auth/login', data);\n  }\n\n  logout (): Promise<AxiosResponse<ApiResponse>> {\n    return this._instance.delete('/auth/login');\n  }\n\n  auth (): Promise<AxiosResponse<ApiResponse<AuthResponseData>>> {\n    return this._instance.get(`/auth/me`);\n  }\n}\n\nexport default new AuthAPI();\n","import { FormAction, stopSubmit } from 'redux-form';\r\nimport securityAPI, { ResultCodeCaptcha } from '../../api/securityAPI';\r\nimport { LoginPropsType } from '../../types';\r\nimport { BaseThunkType, BaseActionType } from '../redux-store';\r\nimport { ResultCode } from '../../api/api';\r\nimport authApi from '../../api/authApi';\r\n\r\nexport type InitialState = typeof initialState;\r\nexport type ThunkType = BaseThunkType<ActionsType | FormAction>\r\ntype ActionsType = BaseActionType<typeof actions>;\r\n\r\ninterface UserData {\r\n  email: null | string;\r\n  login: null | string;\r\n  userId: null | string;\r\n  isAuth: boolean;\r\n}\r\n\r\nconst initialState = {\r\n  email:      '' as null | string,\r\n  login:      '' as null | string,\r\n  userId:     '' as null | string,\r\n  isAuth:     false as null | boolean,\r\n  captchaUrl: null as null | string,\r\n};\r\n\r\nconst reducer = (state = initialState, action: ActionsType): InitialState => {\r\n  switch (action.type) {\r\n    case 'social-network/auth/SET_USER_DATA':\r\n      return {\r\n        ...state,\r\n        ...action.data,\r\n      };\r\n    case 'social-network/auth/SET_CAPTCHA_URL':\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.captchaUrl,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  setUserData:   ({ email, login, userId, isAuth }: UserData) => ({\r\n    type: 'social-network/auth/SET_USER_DATA',\r\n    data: { email, login, userId, isAuth },\r\n  } as const),\r\n  setCaptchaUrl: (url: string) => ({ type: 'social-network/auth/SET_CAPTCHA_URL', captchaUrl: url } as const)\r\n};\r\n\r\n\r\nexport const authorize = (): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data } = await authApi.auth();\r\n\r\n    if (data.resultCode === ResultCode.Error) {\r\n      throw new Error(data.messages[0]);\r\n    }\r\n\r\n    const { email, login, id: userId } = data.data;\r\n\r\n    dispatch(actions.setUserData({ email, login, userId, isAuth: true }));\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const login = ({\r\n                        email,\r\n                        password,\r\n                        rememberMe,\r\n                        captcha = null\r\n                      }: LoginPropsType): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data } = await authApi.login({ email, password, rememberMe, captcha });\r\n\r\n    if (data.resultCode === ResultCode.Success) {\r\n      dispatch(authorize());\r\n    }\r\n    else if (data.resultCode === ResultCodeCaptcha.Captcha) {\r\n      dispatch(getCaptcha());\r\n    }\r\n    else {\r\n      throw new Error(data.messages[0]);\r\n    }\r\n  }\r\n  catch (error) {\r\n    dispatch(stopSubmit('login', { _error: error.message }));\r\n  }\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data }                 = await authApi.logout();\r\n    const { resultCode, messages } = data;\r\n\r\n    if (resultCode === ResultCode.Success) {\r\n      dispatch(actions.setUserData({ email: null, login: null, userId: null, isAuth: false }));\r\n    }\r\n    else {\r\n      throw new Error(messages[0]);\r\n    }\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getCaptcha = (): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data: { url } } = await securityAPI.getCaptcha();\r\n\r\n    if (url) {\r\n      dispatch(actions.setCaptchaUrl(url));\r\n    }\r\n    else {\r\n      throw new Error('Error with captcha');\r\n    }\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { authorize } from '../auth/reducer';\r\nimport { BaseThunkType, BaseActionType } from '../redux-store';\r\n\r\nexport type InitialState = typeof initialState;\r\nexport type ThunkType = BaseThunkType<ActionsType>\r\ntype ActionsType = BaseActionType<typeof actions>;\r\n\r\nconst initialState = {\r\n  initialized: false,\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action: ActionsType): InitialState => {\r\n  switch (action.type) {\r\n    case 'social-network/app/SET_INITIALIZED':\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  setInitialized: () => ({ type: 'social-network/app/SET_INITIALIZED' } as const),\r\n};\r\n\r\nexport const initializing = (): ThunkType => async (dispatch) => {\r\n  try {\r\n    await dispatch(authorize());\r\n    dispatch(actions.setInitialized());\r\n  }\r\n  catch (error) {\r\n    throw Error(error);\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { Action, applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport profileReducer from './profile/reducer';\r\nimport dialogsReducer from './dialogs/reducer';\r\nimport friendsReducer from './friends/reducer';\r\nimport usersReducer from './users/reducer';\r\nimport authReducer from './auth/reducer';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\r\nimport appReducer from './app/reducer';\r\n\r\nexport type Reducers = typeof reducers;\r\nexport type AppStateType = ReturnType<Reducers>;\r\n\r\nconst reducers = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  friends:     friendsReducer,\r\n  usersPage:   usersReducer,\r\n  auth:        authReducer,\r\n  form:        formReducer,\r\n  app:         appReducer,\r\n});\r\n\r\nexport type BaseActionType<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never;\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store            = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './Navbar.module.css';\r\n\r\nconst Navbar: React.FC = () => {\r\n  return (\r\n    <nav className={classes.nav}>\r\n      <ul className={classes.list}>\r\n        <li>\r\n          <NavLink className={classes.item}\r\n                   activeClassName={classes.item_active}\r\n                   to=\"/profile\"\r\n                   href=\"#\">Profile</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink className={classes.item}\r\n                   activeClassName={classes.item_active}\r\n                   to=\"/messages\"\r\n                   href=\"#\">Messages</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink className={classes.item} activeClassName={classes.item_active} to=\"/news\" href=\"#\">News</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink className={classes.item}\r\n                   activeClassName={classes.item_active}\r\n                   to=\"/music\"\r\n                   href=\"#\">Music</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink className={classes.item}\r\n                   activeClassName={classes.item_active}\r\n                   to=\"/settings\"\r\n                   href=\"#\">Settings</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink className={classes.item}\r\n                   activeClassName={classes.item_active}\r\n                   to=\"/users\"\r\n                   href=\"#\">Find users</NavLink>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import classes from './FriendMini.module.css';\r\nimport React from 'react';\r\n\r\ninterface FriendMiniProps {\r\n  name: string;\r\n  avatar: string;\r\n}\r\n\r\nconst FriendMini = ({ name, avatar }: FriendMiniProps): JSX.Element => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <img src={avatar} alt=\"friend's avatar\"/>\r\n      <span>{name}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FriendMini;\r\n","import classes from './Friends.module.css';\r\nimport React from 'react';\r\nimport FriendMini from './FriendMini/FriendMini';\r\nimport { InitialState } from '../../../redux/friends/reducer';\r\n\r\ninterface FriendsProps {\r\n  friends: InitialState;\r\n}\r\n\r\nconst Friends = ({ friends }: FriendsProps): JSX.Element => {\r\n  const friendsElements = friends.map((item) => <FriendMini key={item.id} {...item}/>);\r\n\r\n  return (\r\n    <ul className={classes.list}>\r\n      {friendsElements}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Friends;\r\n","import classes from './SideBar.module.css';\r\nimport React from 'react';\r\nimport Friends from './Friends/Friends';\r\nimport { InitialState } from '../../redux/friends/reducer';\r\n\r\ninterface Props {\r\n  friends: InitialState;\r\n}\r\n\r\nconst SideBar: React.FC<Props> = ({ friends }) => {\r\n  return (\r\n    <div className={classes.side}>\r\n      <h2 className={classes.title}>Friends</h2>\r\n      <Friends friends={friends}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","import SideBar from './SideBar';\r\nimport { connect } from 'react-redux';\r\nimport { getFriendsState } from '../../redux/friends/selector';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { InitialState } from '../../redux/friends/reducer';\r\n\r\ninterface StateProps {\r\n  friends: InitialState\r\n}\r\n\r\ninterface DispatchProps {\r\n}\r\n\r\ninterface OwnProps {\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): StateProps => {\r\n  return {\r\n    friends: getFriendsState(state),\r\n  };\r\n};\r\n\r\nconst methods: DispatchProps = {};\r\n\r\nconst connector = connect<StateProps, DispatchProps, OwnProps, AppStateType>(mapStateToProps, methods);\r\n\r\nconst SideBarContainer = connector(SideBar);\r\n\r\nexport default SideBarContainer;\r\n","import { AppStateType } from '../redux-store';\r\nimport { PostType, ProfileType } from '../../types';\r\n\r\nexport const getUserInfoState   = (state: AppStateType): Partial<ProfileType> => state.profilePage.userInfo || {};\r\nexport const getUserStatusState = (state: AppStateType): string => state.profilePage.userStatus;\r\nexport const getPostsData       = (state: AppStateType): PostType[] => state.profilePage.postsData;\r\nexport const getIsValid         = (state: AppStateType): boolean => state.profilePage.isValid;\r\n","import { AppStateType } from '../redux-store';\r\n\r\nexport const getEmailState      = (state: AppStateType): string => state.auth.email || '';\r\nexport const getLoginState      = (state: AppStateType): string => state.auth.login || '';\r\nexport const getUserIdState     = (state: AppStateType): string => state.auth.userId || '';\r\nexport const getIsAuthState     = (state: AppStateType): boolean => state.auth.isAuth || false;\r\nexport const getCaptchaUrlState = (state: AppStateType): string => state.auth.captchaUrl || '';\r\n","import React, { useEffect, useState } from 'react';\r\nimport { KEY_ENTER } from '../../../../utils/constants';\r\n\r\ninterface Props {\r\n  status: string;\r\n  updateUserStatus: (status: string) => void;\r\n}\r\n\r\nconst ProfileStatus: React.FC<Props> = ({ status, updateUserStatus }) => {\r\n\r\n  const [editMode, setEditMode]       = useState(false);\r\n  const [statusState, setStatusState] = useState(status);\r\n\r\n  useEffect(() => {\r\n    setStatusState(status);\r\n  }, [status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    updateUserStatus(statusState);\r\n  };\r\n\r\n  const handleChangeStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setStatusState(e.currentTarget.value);\r\n  };\r\n\r\n  const handleKeyUpEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === KEY_ENTER) {\r\n      deactivateEditMode();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode\r\n       ? <span onClick={activateEditMode}>{statusState || '---'}</span>\r\n       : <input value={statusState}\r\n                onBlur={deactivateEditMode}\r\n                onKeyUp={handleKeyUpEnter}\r\n                onChange={handleChangeStatus}\r\n                autoFocus={true}/>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatus;\r\n","import { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, Input, Textarea } from '../../../common/FormsControls/FormsControls';\r\nimport { required } from '../../../../utils/validators';\r\nimport React, { useState } from 'react';\r\nimport classes from './ProfileData.module.css';\r\nimport { ContactsType, ProfileType } from '../../../../types';\r\n\r\ninterface Props {\r\n  profileData: Partial<ProfileType>;\r\n  isValid: boolean;\r\n  updateUserData: (userData: ProfileType) => Promise<void>;\r\n}\r\n\r\ntype FormType = React.FC<InjectedFormProps<ProfileType>>;\r\ntype FormNames = Extract<keyof ProfileType, string>;\r\ntype ContactNames = Extract<keyof ContactsType, string>;\r\ntype FullContactNames = `contacts.${ContactNames}`;\r\n\r\nconst ProfileDataForm: FormType = ({ handleSubmit, error, initialValues }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={classes.form}>\r\n      Name: {createField<FormNames>('fullName', Input, [required], 'Full name')}\r\n      About me: {createField<FormNames>('aboutMe', Textarea, [required], 'About me')}\r\n      Looking for a job: {createField<FormNames>('lookingForAJob', Input, [], 'Looking for a job', 'checkbox')}\r\n      Skills: {createField<FormNames>('lookingForAJobDescription', Input, [required], 'Skills')}\r\n      Contacts:\r\n      <ul>\r\n        {!!initialValues.contacts && (Object.keys(initialValues.contacts) as Array<ContactNames>).map(key => (\r\n          <li key={key}>\r\n            {key}: {createField<FullContactNames>(`contacts.${key}`, Input, [], key)}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {error && <span className={classes.form__error}>{error}</span>}\r\n\r\n      <button type=\"submit\">Save</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType>({\r\n  form: 'profileData',\r\n})(ProfileDataForm);\r\n\r\nconst ProfileDataInfo: React.FC<Partial<ProfileType>> = ({\r\n                                                           fullName,\r\n                                                           aboutMe,\r\n                                                           lookingForAJob,\r\n                                                           lookingForAJobDescription,\r\n                                                           contacts\r\n                                                         }) => {\r\n  return (\r\n    <ul>\r\n      <li>\r\n        Name: {fullName}\r\n      </li>\r\n      <li>\r\n        About me: {aboutMe}\r\n      </li>\r\n      <li>\r\n        Looking for a job: {lookingForAJob}\r\n      </li>\r\n      <li>\r\n        Skills: {lookingForAJobDescription}\r\n      </li>\r\n      <li>\r\n        Contacts:\r\n        <ul>\r\n          {!!contacts && Object.entries(contacts).map(([key, value]) => (\r\n            <li key={key}>{key}: {value}</li>\r\n          ))}\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst ProfileData: React.FC<Props> = ({ profileData, isValid, updateUserData }) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n  };\r\n\r\n  const handleClickOnEdit = () => {\r\n    if (editMode) {\r\n      deactivateEditMode();\r\n    }\r\n    else {\r\n      activateEditMode();\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (formData: ProfileType) => {\r\n    //TODO: remove then\r\n    updateUserData(formData).then(() => {\r\n      if (isValid) setEditMode(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleClickOnEdit}>Edit</button>\r\n      {editMode\r\n       ? <ProfileDataReduxForm initialValues={profileData}\r\n                               onSubmit={handleSubmit}/>\r\n       : <ProfileDataInfo {...profileData}/>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileData;\r\n","import React from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport emptyAvatar from '../../../images/empty_avatar.svg';\r\nimport classes from './ProfileInfo.module.css';\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus';\r\nimport ProfileData from './ProfileData/ProfileData';\r\nimport { ProfileType } from '../../../types';\r\n\r\ninterface Props {\r\n  isOwner: boolean;\r\n  userInfo: Partial<ProfileType>;\r\n  userStatus: string;\r\n  isValid: boolean;\r\n  updateUserStatus: (status: string) => void;\r\n  updateUserPhoto: (image: File) => void;\r\n  updateUserData: (userData: ProfileType) => Promise<void>;\r\n}\r\n\r\nconst ProfileInfo: React.FC<Props> = ({\r\n                                        isOwner,\r\n                                        userInfo,\r\n                                        userStatus,\r\n                                        isValid,\r\n                                        updateUserStatus,\r\n                                        updateUserPhoto,\r\n                                        updateUserData\r\n                                      }) => {\r\n  const { photos } = userInfo || {};\r\n\r\n  const handleChangePhoto = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      updateUserPhoto(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    userInfo\r\n    ? <div>\r\n      <img\r\n        src=\"https://cdn.pixabay.com/photo/2020/12/19/03/27/person-5843476_960_720.jpg\"\r\n        alt=\"машина\"/>\r\n      <div>\r\n        <img className={classes.info__avatar} src={photos?.large || emptyAvatar} alt=\"Avatar\"/>\r\n        {isOwner && <input type=\"file\" onChange={handleChangePhoto}/>}\r\n        <ProfileData profileData={userInfo} isValid={isValid} updateUserData={updateUserData}/>\r\n        <ProfileStatus status={userStatus} updateUserStatus={updateUserStatus}/>\r\n      </div>\r\n    </div>\r\n    : <Preloader/>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\ninterface Props {\r\n  message: string\r\n}\r\n\r\nconst Post: React.FC<Props> = ({ message }) => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <img\r\n        src=\"https://sun9-32.userapi.com/impf/c850220/v850220643/1cf89f/09Ze66DlRZ8.jpg?size=1440x2160&quality=96&proxy=1&sign=8cd83def1f42c508f1c64c607f5504fd&type=album\"\r\n        alt=\"avatar\"/>\r\n      {message}\r\n      <div>\r\n        <span>Like</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { maxLength30, required } from '../../../utils/validators';\r\nimport { PostType as PostType } from '../../../types';\r\n\r\ninterface Props {\r\n  addPost: (newPost: string) => void;\r\n  postsData: PostType[];\r\n}\r\n\r\ninterface FormProps {\r\n  newPost: string;\r\n}\r\n\r\ntype FormNames = Extract<keyof FormProps, string>;\r\ntype FormType = React.FC<InjectedFormProps<FormProps>>\r\n\r\nconst MyPostsForm: FormType = ({ handleSubmit }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {createField<FormNames>('newPost', Textarea, [required, maxLength30], 'New post')}\r\n      <button type=\"submit\">Add post</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst MyPostsReduxForm = reduxForm<FormProps>({\r\n  form: 'newPost',\r\n})(MyPostsForm);\r\n\r\nconst MyPosts: React.FC<Props> = React.memo(({ addPost, postsData }) => {\r\n\r\n  const postsElements = postsData.map(({ id, message }) => <Post key={id} message={message}/>);\r\n  const handleAddPost = ({ newPost }: FormProps) => {\r\n    addPost(newPost);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      My posts\r\n      <MyPostsReduxForm onSubmit={handleAddPost}/>\r\n      <div>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MyPosts;\r\n","import { actions } from '../../../redux/profile/reducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\nimport { getPostsData } from '../../../redux/profile/selector';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../types';\r\n\r\ninterface StateProps {\r\n  postsData: PostType[],\r\n}\r\n\r\ninterface DispatchProps {\r\n  addPost: (newPost: string) => void\r\n}\r\n\r\ninterface OwnProps {\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): StateProps => {\r\n  return {\r\n    postsData: getPostsData(state),\r\n  };\r\n};\r\n\r\nconst methods: DispatchProps = {\r\n  addPost: actions.addPost,\r\n};\r\n\r\nconst connector = connect<StateProps, DispatchProps, OwnProps, AppStateType>(mapStateToProps, methods);\r\n\r\nconst MyPostsContainer = connector(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport { ProfileType } from '../../types';\r\n\r\ninterface Props {\r\n  userId: string | null;\r\n  userInfo: Partial<ProfileType>;\r\n  userStatus: string;\r\n  isValid: boolean;\r\n  updateUserStatus: (status: string) => void;\r\n  updateUserPhoto: (image: File) => void;\r\n  updateUserData: (userData: ProfileType) => Promise<void>;\r\n}\r\n\r\nconst Profile: React.FC<Props> = ({\r\n                                    userId,\r\n                                    userInfo,\r\n                                    userStatus,\r\n                                    isValid,\r\n                                    updateUserStatus,\r\n                                    updateUserPhoto,\r\n                                    updateUserData\r\n                                  }) => {\r\n  return (\r\n    <main>\r\n      <ProfileInfo isOwner={userId === userInfo?.userId}\r\n                   userInfo={userInfo}\r\n                   userStatus={userStatus}\r\n                   isValid={isValid}\r\n                   updateUserStatus={updateUserStatus}\r\n                   updateUserPhoto={updateUserPhoto}\r\n                   updateUserData={updateUserData}/>\r\n      <MyPostsContainer/>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport {\r\n  getUserInfo,\r\n  getUserStatus,\r\n  updateUserData,\r\n  updateUserPhoto,\r\n  updateUserStatus,\r\n} from '../../redux/profile/reducer';\r\nimport { RouteComponentProps, withRouter } from 'react-router';\r\nimport { compose } from 'redux';\r\nimport { getUserInfoState, getUserStatusState, getIsValid } from '../../redux/profile/selector';\r\nimport { getUserIdState } from '../../redux/auth/selector';\r\nimport { ProfileType as ProfileInterface } from '../../types';\r\nimport Profile from './Profile';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ninterface StatePropsType {\r\n  userInfo: Partial<ProfileInterface>;\r\n  userStatus: string;\r\n  userId: string | null;\r\n  isValid: boolean;\r\n}\r\n\r\ninterface DispatchPropsType {\r\n  getUserInfo: (userId: string) => void;\r\n  getUserStatus: (userId: string) => void;\r\n  updateUserStatus: (status: string) => void;\r\n  updateUserPhoto: (image: File) => void;\r\n  updateUserData: (userData: ProfileInterface) => Promise<void>;\r\n}\r\n\r\ninterface OwnPropsType {}\r\n\r\ninterface PathParamsType {\r\n  userId: string;\r\n}\r\n\r\ntype PropsType = ConnectedProps<typeof connector> & RouteComponentProps<PathParamsType>;\r\n\r\nconst mapStateToProps = (state: AppStateType): StatePropsType => ({\r\n  userInfo:   getUserInfoState(state),\r\n  userStatus: getUserStatusState(state),\r\n  userId:     getUserIdState(state),\r\n  isValid:    getIsValid(state),\r\n});\r\n\r\nconst mapDispatchToProps: DispatchPropsType = {\r\n  getUserInfo,\r\n  getUserStatus,\r\n  updateUserStatus,\r\n  updateUserPhoto,\r\n  updateUserData,\r\n} as unknown as DispatchPropsType;\r\n\r\nconst connector = connect<StatePropsType, DispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps);\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  _refreshProfileInfo = () => {\r\n    const { history, getUserInfo, getUserStatus } = this.props;\r\n    const userId                                  = this.props.match.params.userId || this.props.userId || '';\r\n\r\n    if (!userId) {\r\n      history.push('/login');\r\n    }\r\n\r\n    getUserInfo(userId);\r\n    getUserStatus(userId);\r\n  };\r\n\r\n  componentDidMount () {\r\n    this._refreshProfileInfo();\r\n  }\r\n\r\n  componentDidUpdate (prevProps: PropsType) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this._refreshProfileInfo();\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Profile {...this.props} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connector,\r\n  withRouter,\r\n)(ProfileContainer);\r\n","export default __webpack_public_path__ + \"static/media/logo.620308a0.svg\";","import React from 'react';\r\nimport logo from '../../images/logo.svg';\r\nimport classes from './Header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ninterface PropsType {\r\n  login: string;\r\n  logout: () => void;\r\n  isAuth: boolean;\r\n}\r\n\r\nconst Header: React.FC<PropsType> = ({ login, logout, isAuth }) => {\r\n  return (\r\n    <header className={classes.header}>\r\n      <img src={logo} alt=\"\" className={classes.header__logo}/>\r\n      <div>\r\n        {isAuth\r\n         ? (\r\n           <div className={classes.header__nav}>\r\n             <p>{login}</p>\r\n             <button onClick={logout}>Log out</button>\r\n           </div>\r\n         )\r\n         : <NavLink to=\"/auth\">Login</NavLink>}\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { logout, ThunkType } from '../../redux/auth/reducer';\r\nimport { getEmailState, getIsAuthState, getLoginState, getUserIdState } from '../../redux/auth/selector';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ninterface StatePropsType {\r\n  email: string;\r\n  login: string;\r\n  userId: string;\r\n  isAuth: boolean;\r\n}\r\n\r\ninterface DispatchPropsType {\r\n  logout: () => ThunkType;\r\n}\r\n\r\ninterface OwnPropsType {\r\n}\r\n\r\ntype PropsType = ConnectedProps<typeof connector>;\r\n\r\nconst mapStateToProps = (state: AppStateType): StatePropsType => ({\r\n  email:  getEmailState(state),\r\n  login:  getLoginState(state),\r\n  userId: getUserIdState(state),\r\n  isAuth: getIsAuthState(state),\r\n});\r\n\r\nconst mapDispatchToProps: DispatchPropsType = {\r\n  logout,\r\n};\r\n\r\nconst connector = connect<StatePropsType, DispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps);\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n  render () {\r\n    return (\r\n      <Header {...this.props}/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connector,\r\n)(HeaderContainer);\r\n","import { Redirect, Route, RouteComponentProps } from 'react-router';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n  path: string;\r\n  render: (props: RouteComponentProps) => React.ReactNode\r\n  condition: boolean;\r\n  to: string;\r\n}\r\n\r\nconst ProtectedRoute: React.FC<Props> = ({ path, render, condition, to }) => {\r\n  return condition\r\n         ? <Route path={path} render={render}/>\r\n         : <Redirect to={to}/>;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n","import { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport React from 'react';\r\nimport { createField, Input } from '../common/FormsControls/FormsControls';\r\nimport { maxLength30, required } from '../../utils/validators';\r\nimport { useHistory } from 'react-router';\r\nimport classes from './Login.module.css';\r\nimport { LoginPropsType } from '../../types';\r\n\r\ninterface Props {\r\n  isAuth: boolean;\r\n  login: (props: LoginPropsType) => void;\r\n  captchaUrl: string;\r\n}\r\n\r\ninterface LoginFormProps {\r\n  captchaUrl: string;\r\n}\r\n\r\ntype LoginFormType = React.FC<InjectedFormProps<LoginPropsType, LoginFormProps> & LoginFormProps>;\r\n\r\ntype LoginFieldNames = Extract<keyof LoginPropsType, string>;\r\n\r\nconst LoginForm: LoginFormType = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={classes.form}>\r\n      {createField<LoginFieldNames>('email', Input, [required, maxLength30], 'Email')}\r\n      {createField<LoginFieldNames>('password', Input, [required, maxLength30], 'Password', 'password')}\r\n      <div>\r\n        {createField<LoginFieldNames>('rememberMe', Input, [], '', 'checkbox')}\r\n        remember me\r\n      </div>\r\n      {!!captchaUrl && (\r\n        <div>\r\n          <img src={captchaUrl} alt=\"captcha\"/>\r\n          {createField<LoginFieldNames>('captcha', Input, [], 'Text from image')}\r\n        </div>\r\n      )}\r\n      {error && <span className={classes.form__error}>{error}</span>}\r\n      <button type=\"submit\">Login</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginPropsType, LoginFormProps>({ form: 'login' })(LoginForm);\r\n\r\nconst Login: React.FC<Props> = ({ isAuth, login, captchaUrl }) => {\r\n\r\n  const history      = useHistory();\r\n  const handleSubmit = (formData: LoginPropsType) => {\r\n    login(formData);\r\n  };\r\n\r\n  if (isAuth) {\r\n    history.push('/profile');\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>LOGIN</h1>\r\n      <LoginReduxForm onSubmit={handleSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport Login from './Login';\r\nimport { login } from '../../redux/auth/reducer';\r\nimport { getCaptchaUrlState, getIsAuthState } from '../../redux/auth/selector';\r\nimport { LoginPropsType } from '../../types';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ninterface StateProps {\r\n  isAuth: boolean;\r\n  captchaUrl: string;\r\n}\r\n\r\ninterface DispatchProps {\r\n  login: (props: LoginPropsType) => void\r\n}\r\n\r\ninterface OwnProps {\r\n}\r\n\r\ntype Props = ConnectedProps<typeof connector>;\r\n\r\nconst mapStateToProps = (state: AppStateType): StateProps => ({\r\n  isAuth:     getIsAuthState(state),\r\n  captchaUrl: getCaptchaUrlState(state),\r\n});\r\n\r\nconst mapDispatchToProps: DispatchProps = {\r\n  login,\r\n};\r\n\r\nconst connector = connect<StateProps, DispatchProps, OwnProps, AppStateType>(mapStateToProps, mapDispatchToProps);\r\n\r\nclass LoginContainer extends React.Component<Props> {\r\n  render () {\r\n    return (\r\n      <Login {...this.props}/>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default compose(\r\n  connector,\r\n)(LoginContainer);\r\n","import { AppStateType } from '../redux-store';\r\n\r\nexport const getInitializedState = (state: AppStateType) => state.app.initialized;\r\n","import React, { Suspense } from 'react';\r\nimport Preloader from '../components/common/Preloader/Preloader';\r\n\r\nfunction withSuspense<WCP>(Component: React.ComponentType<WCP>) {\r\n  return (props: WCP) => {\r\n    return <Suspense fallback={<Preloader/>}>\r\n      <Component {...props}/>\r\n    </Suspense>;\r\n  };\r\n}\r\n\r\nexport default withSuspense;\r\n","import './App.css';\r\nimport React, { lazy } from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport Navbar from '../Navbar/Navbar';\r\nimport SideBarContainer from '../SideBar/SideBarContainer';\r\nimport ProfileContainer from '../Profile/ProfileContainer';\r\nimport HeaderContainer from '../Header/HeaderContainer';\r\nimport ProtectedRoute from '../../hoc/ProtectedRoute';\r\nimport LoginContainer from '../Login/LoginContainer';\r\nimport { compose } from 'redux';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\nimport { initializing } from '../../redux/app/reducer';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { getInitializedState } from '../../redux/app/selector';\r\nimport { getIsAuthState } from '../../redux/auth/selector';\r\nimport withSuspense from '../../hoc/withSuspense';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nconst DialogsContainer = lazy(() => import('../Dialogs/DialogsContainer').then(DialogsContainer => DialogsContainer));\r\nconst UsersContainer   = lazy(() => import('../Users/UsersContainer').then(UsersContainer => UsersContainer));\r\n\r\ninterface StatePropsType {\r\n  isAuth: boolean;\r\n  initialized: boolean;\r\n}\r\n\r\ninterface DispatchPropsType {\r\n  initializing: () => void;\r\n}\r\n\r\ninterface OwnProps {\r\n}\r\n\r\ntype PropsType = ConnectedProps<typeof connector>;\r\n\r\nconst mapStateToProps = (state: AppStateType): StatePropsType => ({\r\n  isAuth:      getIsAuthState(state),\r\n  initialized: getInitializedState(state),\r\n});\r\n\r\nconst mapDispatchToProps: DispatchPropsType = {\r\n  initializing,\r\n};\r\n\r\nconst connector = connect<StatePropsType, DispatchPropsType, OwnProps, AppStateType>(mapStateToProps, mapDispatchToProps);\r\n\r\nconst Dialogs = withSuspense(DialogsContainer);\r\nconst Users   = withSuspense(UsersContainer);\r\n\r\nclass App extends React.Component<PropsType> {\r\n  componentDidMount () {\r\n    this.props.initializing();\r\n  }\r\n\r\n  render () {\r\n    let { isAuth, initialized } = this.props;\r\n    return initialized\r\n           ? (\r\n             <div className=\"app-wrapper\">\r\n               <HeaderContainer/>\r\n               <Navbar/>\r\n               <SideBarContainer/>\r\n               <div className=\"app-wrapper__content\">\r\n                 <Switch>\r\n                   <Redirect exact from=\"/\" to=\"/profile\"/>\r\n                   <Route path=\"/login\">\r\n                     <LoginContainer/>\r\n                   </Route>\r\n                   <Route path=\"/profile/:userId?\">\r\n                     <ProfileContainer/>\r\n                   </Route>\r\n                   <ProtectedRoute path=\"/messages\"\r\n                                   condition={isAuth}\r\n                                   to={'/login'}\r\n                                   render={() => <Dialogs/>}/>\r\n                   <ProtectedRoute path=\"/users\"\r\n                                   condition={isAuth}\r\n                                   to={'/login'}\r\n                                   render={() => <Users/>}/>\r\n                   <Route path=\"/error\">\r\n                     <div>\r\n                       ERROR 404 =D\r\n                     </div>\r\n                   </Route>\r\n                   <Redirect to=\"/error\"/>\r\n                 </Switch>\r\n               </div>\r\n             </div>\r\n           )\r\n           : <Preloader/>;\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  withRouter,\r\n  connector,\r\n)(App);\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport store from './redux/redux-store';\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App/>\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export default __webpack_public_path__ + \"static/media/loader.2e72bf7b.gif\";","import preloader from '../../../images/loader.gif';\r\nimport React from 'react';\r\n\r\nconst Preloader: React.FC = () => {\r\n  return <img src={preloader} alt=\"Loader\"/>;\r\n};\r\n\r\nexport default Preloader;\r\n","export const API_SAMURAI_SETTINGS = {\r\n  baseUrl: 'https://social-network.samuraijs.com/api/1.0',\r\n  token: '9b281f13-b744-4cc8-8a50-53b0d0396ab3',\r\n};\r\n\r\nexport const KEY_ENTER = 'Enter';\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2mwfe\",\"header__logo\":\"Header_header__logo__3iivq\",\"header__nav\":\"Header_header__nav__1XPPG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"side\":\"SideBar_side__38-4p\",\"title\":\"SideBar_title__3wRqT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"FormsControls_control__1yO0J\",\"control__component\":\"FormsControls_control__component__3xDU9\",\"control__message\":\"FormsControls_control__message__WqPQo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileData_form__3k91N\",\"form__error\":\"ProfileData_form__error__3IOQ_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__qs7PG\",\"form__error\":\"Login_form__error__1Yyjz\"};","export default __webpack_public_path__ + \"static/media/empty_avatar.0901ad81.svg\";"],"sourceRoot":""}