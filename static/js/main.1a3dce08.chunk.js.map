{"version":3,"sources":["utils/constants.ts","utils/enums.ts","components/Profile/MyPosts/MyPosts.module.css","images/empty_avatar.svg","components/common/FormsControls/FormsControls.module.css","components/Profile/ProfileInfo/ProfileData/ProfileData.module.css","components/common/UploadButton/UploadButton.module.css","components/Login/LoginPage.module.css","redux/dialogs/reducer.ts","api/usersAPI.ts","utils/helpers.ts","redux/users/reducer.ts","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfilePage.module.css","components/Logo/Logo.module.css","components/Header/Header.module.css","components/common/FormsControls/FormsControls.tsx","api/api.ts","api/securityAPI.ts","reportWebVitals.ts","api/profileAPI.ts","redux/profile/reducer.ts","redux/friends/reducer.ts","api/authApi.ts","redux/auth/reducer.ts","redux/app/reducer.ts","redux/redux-store.ts","components/common/AntField/AntField.tsx","components/Navbar/Navbar.tsx","redux/auth/selector.ts","redux/profile/selector.ts","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/common/UploadButton/UploadButton.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfilePage.tsx","hoc/ProtectedRoute.tsx","redux/app/selector.ts","hoc/withSuspense.tsx","components/Login/LoginPage.tsx","images/logo.svg","components/Logo/Logo.tsx","components/Header/Header.tsx","components/App/App.tsx","index.tsx","utils/validators/index.ts","images/loader.gif","components/common/Preloader/Preloader.tsx"],"names":["API_SAMURAI_SETTINGS","baseUrl","token","KEY_ENTER","FilterFriend","module","exports","initialState","dialogsData","id","name","ownerId","messagesData","message","actions","sendMessage","newMessage","type","reducer","state","action","page","pageSize","filters","params","term","push","Number","friend","AllUsers","this","_instance","get","join","then","res","data","post","delete","API","updateObjectInArray","arr","keyId","valueId","newProps","map","item","users","usersCount","currentPage","isFetching","isTogglingFollowUsers","userId","getUsers","dispatch","a","usersAPI","totalCount","items","console","log","toggleFollow","actionCreator","apiMethod","resultCode","messages","ResultCode","Error","follow","bind","unfollow","followed","filter","FromControl","meta","valid","touched","error","children","hasError","className","classes","control","control__message","Textarea","props","input","rest","Input","createField","component","validate","placeholder","axios","create","baseURL","withCredentials","headers","ResultCodeCaptcha","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","status","put","image","formData","FormData","append","profileData","postsData","userInfo","userStatus","isValid","newPost","userPhotos","index","photos","avatar","email","login","isAuth","captchaUrl","url","authorize","authApi","auth","getCaptcha","securityAPI","initialized","reducers","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","friends","friendsReducer","usersPage","usersReducer","authReducer","form","formReducer","app","appReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","AntComponent","Navbar","theme","defaultSelectedKeys","mode","Item","icon","UserOutlined","to","href","MessageOutlined","GlobalOutlined","CustomerServiceOutlined","SettingOutlined","TeamOutlined","getLoginState","getUserIdState","getIsAuthState","getCaptchaUrlState","getUserInfoState","getUserStatusState","getPostsData","getIsValid","ProfileStatus","isOwner","useDispatch","useSelector","useState","editMode","setEditMode","statusState","setStatusState","useEffect","deactivateEditMode","profileAPI","setStatus","Success","updateUserStatus","value","onBlur","onKeyUp","e","key","onChange","currentTarget","autoFocus","onClick","ProfileDataReduxForm","reduxForm","handleSubmit","initialValues","onSubmit","required","contacts","Object","keys","form__error","ProfileDataInfo","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","entries","ProfileData","userData","setProfileData","getProfileData","errors","reduce","split","element","slice","length","toLowerCase","stopSubmit","UploadButton","useRef","ref","button","current","click","UploadOutlined","ProfileInfo","info","width","height","src","large","emptyAvatar","fallback","target","files","setPhoto","Preloader","Post","profileInfo","likes","setLikes","dislikes","setDislikes","setAction","title","createElement","LikeFilled","LikeOutlined","DislikeFilled","DislikeOutlined","author","size","small","preview","style","content","datetime","moment","format","fromNow","TextArea","AntTextArea","field","submitCount","hasFeedback","submitted","submittedError","touchedError","help","validateStatus","setFieldTouched","setFieldValue","isRequired","MyPostsForm","values","setSubmitting","isSubmitting","submitForm","onFinish","as","showCount","allowClear","htmlType","disabled","form__submit","MyPosts","React","memo","postsElements","posts","ProfilePage","history","useHistory","useParams","refUserId","refreshProfileInfo","useCallback","getUserInfo","getStatus","getUserStatus","main","ProtectedRoute","path","render","condition","getInitializedState","withSuspense","Component","LoginReduxForm","maxLength30","alt","LoginPage","password","rememberMe","captcha","Captcha","_error","Logo","logo","AntdHeader","Layout","Header","justify","gutter","header__login","logout","Content","Footer","Sider","DialogsContainer","lazy","UsersPage","mapDispatchToProps","initializing","connector","connect","Dialogs","Users","App","collapsed","onCollapse","setState","minHeight","collapsible","margin","padding","exact","from","textAlign","Date","getFullYear","withRouter","ReactDOM","StrictMode","document","getElementById","max","undefined","preloader"],"mappings":"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","file":"static/js/main.1a3dce08.chunk.js","sourcesContent":["export const API_SAMURAI_SETTINGS = {\r\n  baseUrl: 'https://social-network.samuraijs.com/api/1.0',\r\n  token: '9b281f13-b744-4cc8-8a50-53b0d0396ab3',\r\n};\r\n\r\nexport const KEY_ENTER = 'Enter';\r\n","export enum FilterFriend {\n  AllUsers   = -1,\n  Unfollowed = 0,\n  Followed   = 1,\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__2DBUT\",\"form\":\"MyPosts_form__3LEU4\",\"form__submit\":\"MyPosts_form__submit__1gC-w\"};","export default __webpack_public_path__ + \"static/media/empty_avatar.0901ad81.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"FormsControls_control__3sX1y\",\"control__component\":\"FormsControls_control__component__jFG-5\",\"control__message\":\"FormsControls_control__message__2rlul\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileData_form__1xXzi\",\"form__error\":\"ProfileData_form__error__2x7MZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"UploadButton_button__1Uz35\",\"input\":\"UploadButton_input__1Loc8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"LoginPage_form__3RRNd\",\"form__error\":\"LoginPage_form__error__1w0lZ\"};","import { BaseActionType } from '../redux-store';\r\n\r\nexport type InitialState = typeof initialState;\r\nexport type ActionsType = BaseActionType<typeof actions>;\r\n\r\nconst initialState = {\r\n  dialogsData:  [\r\n    {\r\n      id:      11,\r\n      name:    'Pety',\r\n      ownerId: 2,\r\n    },\r\n    {\r\n      id:      12,\r\n      name:    'Vany',\r\n      ownerId: 3,\r\n    },\r\n    {\r\n      id:      13,\r\n      name:    'Sasha',\r\n      ownerId: 4,\r\n    },\r\n  ],\r\n  messagesData: [\r\n    {\r\n      id:      1,\r\n      message: 'Hello',\r\n      ownerId: 1,\r\n    },\r\n    {\r\n      id:      2,\r\n      message: 'How are you',\r\n      ownerId: 2,\r\n    },\r\n    {\r\n      id:      3,\r\n      message: 'Buy',\r\n      ownerId: 2,\r\n    },\r\n  ],\r\n};\r\n\r\nconst reducer = (state = initialState, action: ActionsType) => {\r\n  switch (action.type) {\r\n    case 'social-network/dialogs/SEND_MESSAGE': {\r\n      return {\r\n        ...state,\r\n        messagesData: [...state.messagesData, { id: 7, message: action.newMessage, ownerId: 1 }],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  sendMessage: (newMessage: string) => ({ type: 'social-network/dialogs/SEND_MESSAGE', newMessage } as const)\r\n};\r\n\r\nexport default reducer;\r\n","import API, { ApiResponse } from './api';\r\nimport { UserType } from '../types';\r\nimport { UserFiltersType } from '../redux/users/reducer';\r\nimport { FilterFriend } from '../utils/enums';\r\n\r\ninterface GetUsersResponse {\r\n  items: UserType[];\r\n  totalCount: number;\r\n  error: null | string;\r\n}\r\n\r\nclass UsersAPI extends API {\r\n  constructor () {\r\n    super();\r\n  }\r\n\r\n  getUsers (page: number, pageSize: number, filters: UserFiltersType): Promise<GetUsersResponse> {\r\n    const params = [`count=${pageSize}`, `page=${page}`];\r\n\r\n    if (filters.term) {\r\n      params.push(`term=${filters.term}`);\r\n    }\r\n\r\n    if (Number(filters.friend) !== FilterFriend.AllUsers) {\r\n      params.push(`friend=${!!Number(filters.friend)}`);\r\n    }\r\n\r\n    return this._instance.get(`/users?${params.join('&')}`).then(res => res.data);\r\n  }\r\n\r\n  follow (id: string): Promise<ApiResponse> {\r\n    return this._instance.post(`/follow/${id}`, {}).then(res => res.data);\r\n  }\r\n\r\n  unfollow (id: string): Promise<ApiResponse> {\r\n    return this._instance.delete(`/follow/${id}`).then(res => res.data);\r\n  }\r\n}\r\n\r\nexport default new UsersAPI();\r\n","export const updateObjectInArray = ( arr: Array<any>, keyId: string, valueId: string, newProps: any ) => {\r\n  return arr.map( item => item[keyId] === valueId ? { ...item, ...newProps } : item );\r\n};\r\n","import usersAPI from '../../api/usersAPI';\r\nimport { updateObjectInArray } from '../../utils/helpers';\r\nimport { UserType } from '../../types';\r\nimport { BaseActionType, BaseThunkType } from '../redux-store';\r\nimport { Dispatch } from 'redux';\r\nimport { ApiResponse, ResultCode } from '../../api/api';\r\nimport { FilterFriend } from '../../utils/enums';\r\n\r\nexport type InitialState = typeof initialState;\r\nexport type ThunkType = BaseThunkType<ActionsType>\r\ntype ActionsType = BaseActionType<typeof actions>;\r\nexport type UserFiltersType = InitialState['filters'];\r\n\r\nconst initialState = {\r\n  users:                 [] as Array<UserType>,\r\n  usersCount:            20,\r\n  pageSize:              5,\r\n  currentPage:           0,\r\n  isFetching:            false,\r\n  isTogglingFollowUsers: [] as Array<string>,\r\n  filters:               {\r\n    term:   '',\r\n    friend: FilterFriend.AllUsers,\r\n  },\r\n};\r\n\r\nconst reducer = (state = initialState, action: ActionsType): InitialState => {\r\n  switch (action.type) {\r\n    case 'social-network/users/FOLLOW':\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, 'id', action.userId, { followed: true }),\r\n      };\r\n    case 'social-network/users/UNFOLLOW':\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, 'id', action.userId, { followed: false }),\r\n      };\r\n    case 'social-network/users/SET_USERS':\r\n      return {\r\n        ...state,\r\n        users: action.users,\r\n      };\r\n    case 'social-network/users/SET_USERS_COUNT':\r\n      return {\r\n        ...state,\r\n        usersCount: action.usersCount,\r\n      };\r\n    case 'social-network/users/SET_CURRENT_PAGE':\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    case 'social-network/users/SET_IS_FETCHING':\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      };\r\n    case 'social-network/users/SET_IS_TOGGLING_FOLLOW_USERS':\r\n      return {\r\n        ...state,\r\n        isTogglingFollowUsers: action.isFetching\r\n                               ? [...state.isTogglingFollowUsers, action.userId]\r\n                               : state.isTogglingFollowUsers.filter(id => id !== action.userId),\r\n      };\r\n    case 'social-network/profile/SET_FILTERS' : {\r\n      return {\r\n        ...state,\r\n        filters: action.filters,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  setFollow:           (userId: string) => ({ type: 'social-network/users/FOLLOW', userId } as const),\r\n  setUnfollow:         (userId: string) => ({ type: 'social-network/users/UNFOLLOW', userId } as const),\r\n  setUsers:            (users: Array<UserType>) => ({ type: 'social-network/users/SET_USERS', users } as const),\r\n  setUsersCount:       (usersCount: number) => ({ type: 'social-network/users/SET_USERS_COUNT', usersCount } as const),\r\n  setCurrentPage:      (currentPage: number) => ({\r\n    type: 'social-network/users/SET_CURRENT_PAGE',\r\n    currentPage,\r\n  } as const),\r\n  setIsFetching:       (isFetching: boolean) => ({\r\n    type: 'social-network/users/SET_IS_FETCHING',\r\n    isFetching,\r\n  } as const),\r\n  setIsTogglingFollow: (userId: string, isFetching: boolean) => ({\r\n    type: 'social-network/users/SET_IS_TOGGLING_FOLLOW_USERS',\r\n    userId,\r\n    isFetching,\r\n  } as const),\r\n  setFilters:          (filters: UserFiltersType) => ({ type: 'social-network/profile/SET_FILTERS', filters } as const),\r\n};\r\n\r\nexport const getUsers = (page: number, pageSize: number, filters: UserFiltersType): ThunkType => async (dispatch) => {\r\n  dispatch(actions.setIsFetching(true));\r\n  try {\r\n    const { totalCount, items } = await usersAPI.getUsers(page + 1, pageSize, filters);\r\n\r\n    dispatch(actions.setCurrentPage(page));\r\n    dispatch(actions.setFilters(filters));\r\n    dispatch(actions.setUsersCount(totalCount));\r\n    dispatch(actions.setUsers(items));\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n  finally {\r\n    dispatch(actions.setIsFetching(false));\r\n  }\r\n};\r\n\r\nconst toggleFollow = async (\r\n  userId: string,\r\n  dispatch: Dispatch<ActionsType>,\r\n  actionCreator: (userId: string) => ActionsType,\r\n  apiMethod: (userId: string) => Promise<ApiResponse>,\r\n): Promise<void> => {\r\n  dispatch(actions.setIsTogglingFollow(userId, true));\r\n  try {\r\n    const { resultCode, messages } = await apiMethod(userId);\r\n\r\n    if (resultCode === ResultCode.Error) {\r\n      throw new Error(messages[0]);\r\n    }\r\n\r\n    dispatch(actionCreator(userId));\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n  finally {\r\n    dispatch(actions.setIsTogglingFollow(userId, false));\r\n  }\r\n};\r\n\r\nexport const follow = (id: string): ThunkType => async (dispatch) => toggleFollow(\r\n  id,\r\n  dispatch,\r\n  actions.setFollow,\r\n  usersAPI.follow.bind(usersAPI),\r\n);\r\n\r\nexport const unfollow = (id: string): ThunkType => async (dispatch) => toggleFollow(\r\n  id,\r\n  dispatch,\r\n  actions.setUnfollow,\r\n  usersAPI.unfollow.bind(usersAPI),\r\n);\r\n\r\nexport default reducer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ProfileInfo_info__1rWgq\",\"info__avatar\":\"ProfileInfo_info__avatar__AOwJm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"ProfilePage_main__3fEUZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Logo_logo__16f9s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3Qhnl\",\"header__login\":\"Header_header__login__3v_jg\"};","import classes from './FormsControls.module.css';\r\nimport React from 'react';\r\nimport { Field, WrappedFieldProps } from 'redux-form';\r\nimport { InputType } from 'zlib';\r\nimport { Validator } from 'redux-form/lib/Field';\r\n\r\nconst FromControl: React.FC<WrappedFieldProps> = ({ meta: { valid, touched, error }, children }) => {\r\n  const hasError = !valid && touched;\r\n  return (\r\n    <div className={classes.control}>\r\n      {children}\r\n      {hasError && <span className={classes.control__message}>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...rest } = props;\r\n\r\n  return (\r\n    <FromControl {...props}><textarea {...input} {...rest}/></FromControl>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...rest } = props;\r\n\r\n  return (\r\n    <FromControl {...props}><input {...input} {...rest}/></FromControl>\r\n  );\r\n};\r\n\r\nexport function createField<FieldNames extends string> (name: FieldNames, component: React.FC<WrappedFieldProps>, validate: Array<Validator> = [], placeholder: string = '', type: InputType = '') {\r\n  return <Field name={name}\r\n                placeholder={placeholder}\r\n                component={component}\r\n                validate={validate}\r\n                type={type}/>;\r\n}\r\n","import axios, { AxiosInstance } from 'axios';\r\nimport { API_SAMURAI_SETTINGS } from '../utils/constants';\r\n\r\nexport enum ResultCode {\r\n  Success = 0,\r\n  Error   = 1,\r\n}\r\n\r\nexport interface ApiResponse<D = {}, RC = ResultCode> {\r\n  resultCode: RC;\r\n  messages: string[];\r\n  data: D;\r\n}\r\n\r\nclass API {\r\n  protected _instance: AxiosInstance;\r\n\r\n  constructor () {\r\n    this._instance = axios.create({\r\n      baseURL:         API_SAMURAI_SETTINGS.baseUrl,\r\n      withCredentials: true,\r\n      headers:         {\r\n        'API-KEY': API_SAMURAI_SETTINGS.token,\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default API;\r\n","import API from './api';\r\nimport { AxiosResponse } from 'axios';\r\n\r\nexport enum ResultCodeCaptcha {\r\n  Captcha = 10\r\n}\r\n\r\ninterface GetCaptchaResponse {\r\n  url: string;\r\n}\r\n\r\nclass SecurityAPI extends API {\r\n  constructor () {\r\n    super();\r\n  }\r\n\r\n  getCaptcha (): Promise<AxiosResponse<GetCaptchaResponse>> {\r\n    return this._instance.get(`/security/get-captcha-url`);\r\n  }\r\n}\r\n\r\nexport default new SecurityAPI();\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import API, { ApiResponse } from './api';\r\nimport { PhotosType, ProfileType } from '../types';\r\nimport { AxiosResponse } from 'axios';\r\n\r\ninterface SetPhotoResponseData {\r\n  photos: PhotosType;\r\n}\r\n\r\nclass ProfileAPI extends API {\r\n  constructor () {\r\n    super();\r\n  }\r\n\r\n  getProfileData (userId: string): Promise<AxiosResponse<ProfileType>> {\r\n    return this._instance.get(`/profile/${userId}`);\r\n  }\r\n\r\n  getStatus (userId: string): Promise<AxiosResponse<string>> {\r\n    return this._instance.get(`/profile/status/${userId}`);\r\n  }\r\n\r\n  setStatus (status: string): Promise<AxiosResponse<ApiResponse>> {\r\n    return this._instance.put('/profile/status', { status });\r\n  }\r\n\r\n  setPhoto (image: File): Promise<AxiosResponse<ApiResponse<SetPhotoResponseData>>> {\r\n    const formData = new FormData();\r\n    formData.append('image', image);\r\n\r\n    return this._instance.put('/profile/photo', formData);\r\n  }\r\n\r\n  setProfileData (profileData: ProfileType): Promise<AxiosResponse<ApiResponse>> {\r\n    return this._instance.put('/profile', profileData);\r\n  }\r\n}\r\n\r\nexport default new ProfileAPI();\r\n","import profileAPI from '../../api/profileAPI';\r\nimport { FormAction, stopSubmit } from 'redux-form';\r\nimport { PhotosType, PostType, ProfileType } from '../../types';\r\nimport { BaseActionType, BaseThunkType } from '../redux-store';\r\nimport { ResultCode } from '../../api/api';\r\n\r\nexport type InitialState = typeof initialState;\r\ntype ActionsType = BaseActionType<typeof actions>;\r\nexport type ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\ninterface ErrorsObject {\r\n  [key: string]: string | ErrorsObject;\r\n}\r\n\r\nconst initialState = {\r\n  postsData:  [\r\n                {\r\n                  id:      1,\r\n                  message: 'How are you?',\r\n                },\r\n                {\r\n                  id:      2,\r\n                  message: 'It is my first post',\r\n                },\r\n              ] as Array<PostType>,\r\n  userInfo:   null as Partial<ProfileType> | null,\r\n  userStatus: 'no status' as string,\r\n  isValid:    true,\r\n};\r\n\r\nconst reducer = (state = initialState, action: ActionsType): InitialState => {\r\n  switch (action.type) {\r\n    case 'social-network/profile/ADD_POST': {\r\n      return {\r\n        ...state,\r\n        postsData: [...state.postsData, { id: 5, message: action.newPost }],\r\n      };\r\n    }\r\n    case 'social-network/profile/REMOVE_POST': {\r\n      return {\r\n        ...state,\r\n        postsData: state.postsData.filter((item, index) => action.index !== index),\r\n      };\r\n    }\r\n    case 'social-network/profile/SET_USER_INFO': {\r\n      return {\r\n        ...state,\r\n        userInfo: action.userInfo,\r\n      };\r\n    }\r\n    case 'social-network/profile/SET_USER_STATUS': {\r\n      return {\r\n        ...state,\r\n        userStatus: action.userStatus,\r\n      };\r\n    }\r\n    case 'social-network/profile/SET_USER_PHOTOS': {\r\n      return {\r\n        ...state,\r\n        userInfo: {\r\n          ...state.userInfo,\r\n          photos: action.userPhotos,\r\n        },\r\n      };\r\n    }\r\n    case 'social-network/profile/SET_VALID': {\r\n      return {\r\n        ...state,\r\n        isValid: action.isValid\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  addPost:       (newPost: string) => ({ type: 'social-network/profile/ADD_POST', newPost } as const),\r\n  removePost:    (index: number) => ({ type: 'social-network/profile/REMOVE_POST', index } as const),\r\n  setUserInfo:   (userInfo: ProfileType) => ({ type: 'social-network/profile/SET_USER_INFO', userInfo } as const),\r\n  setUserStatus: (userStatus: string) => ({ type: 'social-network/profile/SET_USER_STATUS', userStatus } as const),\r\n  setUserPhotos: (userPhotos: PhotosType) => ({ type: 'social-network/profile/SET_USER_PHOTOS', userPhotos } as const),\r\n  setIsValid:    (isValid: boolean) => ({ type: 'social-network/profile/SET_VALID', isValid } as const),\r\n};\r\n\r\n\r\nexport const getUserInfo = (userId: string): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data } = await profileAPI.getProfileData(userId);\r\n\r\n    dispatch(actions.setUserInfo(data));\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getUserStatus = (userId: string): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data } = await profileAPI.getStatus(userId);\r\n\r\n    dispatch(actions.setUserStatus(data));\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const updateUserStatus = (status: string): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data } = await profileAPI.setStatus(status);\r\n\r\n    if (data.resultCode === ResultCode.Success) {\r\n      dispatch(actions.setUserStatus(status));\r\n    }\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const updateUserPhoto = (image: File): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data } = await profileAPI.setPhoto(image);\r\n\r\n    if (data.resultCode === ResultCode.Success) {\r\n      dispatch(actions.setUserPhotos(data.data.photos));\r\n    }\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const updateUserData = (userData: ProfileType): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data } = await profileAPI.setProfileData(userData);\r\n\r\n    if (data.resultCode === ResultCode.Success) {\r\n      const { data } = await profileAPI.getProfileData(userData.userId);\r\n      dispatch(actions.setIsValid(true));\r\n      dispatch(actions.setUserInfo(data));\r\n    }\r\n    else {\r\n      const errors = data.messages.reduce((errors: ErrorsObject, item: string) => {\r\n        dispatch(actions.setIsValid(false));\r\n        const [message, element] = item.split('(');\r\n        const elementRoute       = element.slice(0, element.length - 1).split('->');\r\n\r\n        elementRoute.reduce((res: ErrorsObject | string, item, index, arr) => {\r\n          if (typeof res === 'string') {\r\n            return {};\r\n          }\r\n\r\n          const key = item[0].toLowerCase() + item.slice(1);\r\n\r\n          if (key in res) {\r\n            return res[key];\r\n          }\r\n\r\n          res[key] = index < arr.length - 1 ? {} : message.slice(0, message.length - 1);\r\n\r\n          return res[key];\r\n        }, errors);\r\n\r\n\r\n        return errors;\r\n      }, {});\r\n\r\n      dispatch(stopSubmit('profileData', errors));\r\n    }\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","export type InitialState = typeof initialState;\r\n\r\nconst initialState = [\r\n  {\r\n    id: 2,\r\n    name: \"Pety\",\r\n    avatar: \"https://sun9-1.userapi.com/impf/c623226/v623226632/20ec3/wFW0LmxAF5E.jpg?size=1536x2048&quality=96&proxy=1&sign=3c23701904d2894bc56f0539b108dc64&type=album\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Vany\",\r\n    avatar: \"https://sun9-31.userapi.com/impf/K_i77x3c5rD-pxY1Hu_UzX7uaweHBadmZjnIUg/BaSOzQ1brCo.jpg?size=1620x2160&quality=96&proxy=1&sign=6977728d5d7739f0ff9bf4dd584c78c8&type=album0\",\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Sasha\",\r\n    avatar: \"https://sun9-29.userapi.com/impg/7pSRuhuz_LBQ1A7D-_eoWP0JyE8cMhl4NuHAiw/HuSEMS0th20.jpg?size=1906x2160&quality=96&proxy=1&sign=cc30984ecfe23af9466d513b63073748&type=album\",\r\n  },\r\n];\r\n\r\nconst reducer = (state = initialState, action: any): InitialState => {\r\n  switch (action) {\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import API, { ApiResponse, ResultCode } from './api';\nimport { ResultCodeCaptcha } from './securityAPI';\nimport { LoginPropsType } from '../types';\nimport { AxiosResponse } from 'axios';\n\ninterface LoginResponseData {\n  userId: string;\n}\n\ninterface AuthResponseData {\n  id: string;\n  email: string;\n  login: string;\n}\n\nclass AuthAPI extends API {\n  constructor () {\n    super();\n  }\n\n  login (data: LoginPropsType): Promise<AxiosResponse<ApiResponse<LoginResponseData, ResultCode | ResultCodeCaptcha>>> {\n    return this._instance.post('/auth/login', data);\n  }\n\n  logout (): Promise<AxiosResponse<ApiResponse>> {\n    return this._instance.delete('/auth/login');\n  }\n\n  auth (): Promise<AxiosResponse<ApiResponse<AuthResponseData>>> {\n    return this._instance.get(`/auth/me`);\n  }\n}\n\nexport default new AuthAPI();\n","import { FormAction, stopSubmit } from 'redux-form';\r\nimport securityAPI, { ResultCodeCaptcha } from '../../api/securityAPI';\r\nimport { LoginPropsType } from '../../types';\r\nimport { BaseThunkType, BaseActionType } from '../redux-store';\r\nimport { ResultCode } from '../../api/api';\r\nimport authApi from '../../api/authApi';\r\n\r\nexport type InitialState = typeof initialState;\r\nexport type ThunkType = BaseThunkType<ActionsType | FormAction>\r\ntype ActionsType = BaseActionType<typeof actions>;\r\n\r\ninterface UserData {\r\n  email: null | string;\r\n  login: null | string;\r\n  userId: null | string;\r\n  isAuth: boolean;\r\n}\r\n\r\nconst initialState = {\r\n  email:      '' as null | string,\r\n  login:      '' as null | string,\r\n  userId:     '' as null | string,\r\n  isAuth:     false as null | boolean,\r\n  captchaUrl: null as null | string,\r\n};\r\n\r\nconst reducer = (state = initialState, action: ActionsType): InitialState => {\r\n  switch (action.type) {\r\n    case 'social-network/auth/SET_USER_DATA':\r\n      return {\r\n        ...state,\r\n        ...action.data,\r\n      };\r\n    case 'social-network/auth/SET_CAPTCHA_URL':\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.captchaUrl,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  setUserData:   ({ email, login, userId, isAuth }: UserData) => ({\r\n    type: 'social-network/auth/SET_USER_DATA',\r\n    data: { email, login, userId, isAuth },\r\n  } as const),\r\n  setCaptchaUrl: (url: string) => ({ type: 'social-network/auth/SET_CAPTCHA_URL', captchaUrl: url } as const)\r\n};\r\n\r\n\r\nexport const authorize = (): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data } = await authApi.auth();\r\n\r\n    if (data.resultCode === ResultCode.Error) {\r\n      throw new Error(data.messages[0]);\r\n    }\r\n\r\n    const { email, login, id: userId } = data.data;\r\n\r\n    dispatch(actions.setUserData({ email, login, userId, isAuth: true }));\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const login = ({\r\n                        email,\r\n                        password,\r\n                        rememberMe,\r\n                        captcha = null\r\n                      }: LoginPropsType): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data } = await authApi.login({ email, password, rememberMe, captcha });\r\n\r\n    if (data.resultCode === ResultCode.Success) {\r\n      dispatch(authorize());\r\n    }\r\n    else if (data.resultCode === ResultCodeCaptcha.Captcha) {\r\n      dispatch(getCaptcha());\r\n    }\r\n    else {\r\n      throw new Error(data.messages[0]);\r\n    }\r\n  }\r\n  catch (error) {\r\n    if (error instanceof Error)\r\n      dispatch(stopSubmit('login', { _error: error.message }));\r\n  }\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data }                 = await authApi.logout();\r\n    const { resultCode, messages } = data;\r\n\r\n    if (resultCode === ResultCode.Success) {\r\n      dispatch(actions.setUserData({ email: null, login: null, userId: null, isAuth: false }));\r\n    }\r\n    else {\r\n      throw new Error(messages[0]);\r\n    }\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getCaptcha = (): ThunkType => async (dispatch) => {\r\n  try {\r\n    const { data: { url } } = await securityAPI.getCaptcha();\r\n\r\n    if (url) {\r\n      dispatch(actions.setCaptchaUrl(url));\r\n    }\r\n    else {\r\n      throw new Error('Error with captcha');\r\n    }\r\n  }\r\n  catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { authorize } from '../auth/reducer';\r\nimport { BaseThunkType, BaseActionType } from '../redux-store';\r\n\r\nexport type InitialState = typeof initialState;\r\nexport type ThunkType = BaseThunkType<ActionsType>\r\ntype ActionsType = BaseActionType<typeof actions>;\r\n\r\nconst initialState = {\r\n  initialized: false,\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action: ActionsType): InitialState => {\r\n  switch (action.type) {\r\n    case 'social-network/app/SET_INITIALIZED':\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  setInitialized: () => ({ type: 'social-network/app/SET_INITIALIZED' } as const),\r\n};\r\n\r\nexport const initializing = (): ThunkType => async (dispatch) => {\r\n  try {\r\n    await dispatch(authorize());\r\n    dispatch(actions.setInitialized());\r\n  }\r\n  catch (error) {\r\n    if (typeof error === 'string')\r\n      throw Error(error);\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { Action, applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport profileReducer from './profile/reducer';\r\nimport dialogsReducer from './dialogs/reducer';\r\nimport friendsReducer from './friends/reducer';\r\nimport usersReducer from './users/reducer';\r\nimport authReducer from './auth/reducer';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\r\nimport appReducer from './app/reducer';\r\n\r\nexport type Reducers = typeof reducers;\r\nexport type AppStateType = ReturnType<Reducers>;\r\n\r\nconst reducers = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  friends:     friendsReducer,\r\n  usersPage:   usersReducer,\r\n  auth:        authReducer,\r\n  form:        formReducer,\r\n  app:         appReducer,\r\n});\r\n\r\nexport type BaseActionType<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never;\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store            = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;\r\n","import { Form, Input } from 'antd';\nimport React from 'react';\nimport { FieldProps } from 'formik';\n\nconst { TextArea } = Input;\n\ntype AntComponentsType = typeof TextArea | typeof Input;\ntype PropsType = FieldProps & { submitCount: number, hasFeedback: boolean }\n\nconst AntFieldCreator = (AntComponent: AntComponentsType) => ({\n                                                                form,\n                                                                field,\n                                                                submitCount,\n                                                                hasFeedback,\n                                                                ...props\n                                                              }: PropsType) => {\n\n  const touched        = form.touched[field.name];\n  const submitted      = submitCount > 0;\n  const hasError       = form.errors[field.name];\n  const submittedError = hasError && submitted;\n  const touchedError   = hasError && touched;\n  const handleBlur     = () => form.setFieldTouched(field.name, true);\n  const handleChange   = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => form.setFieldValue(field.name, e.target.value);\n\n  return (\n    <Form.Item\n      hasFeedback={!!(hasFeedback && (submitted || touched))}\n      help={submittedError || touchedError ? hasError : false}\n      validateStatus={submittedError || touchedError ? 'error' : 'success'}\n    >\n      <AntComponent\n        {...field}\n        {...props}\n        onBlur={handleBlur}\n        onChange={handleChange}\n      />\n    </Form.Item>\n  );\n};\n\nexport const AntTextArea = AntFieldCreator(TextArea);\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Menu } from 'antd';\r\nimport {\r\n  CustomerServiceOutlined,\r\n  GlobalOutlined,\r\n  MessageOutlined,\r\n  SettingOutlined,\r\n  TeamOutlined,\r\n  UserOutlined\r\n} from '@ant-design/icons';\r\n\r\nconst Navbar: React.FC = () => {\r\n  return (\r\n    <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n      <Menu.Item key=\"1\" icon={<UserOutlined/>}>\r\n        <Link to=\"/profile\" href=\"#\">Profile</Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"2\" icon={<MessageOutlined/>}>\r\n        <Link to=\"/messages\" href=\"#\">Messages</Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"3\" icon={<GlobalOutlined/>}>\r\n        <Link to=\"/news\" href=\"#\">News</Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"4\" icon={<CustomerServiceOutlined/>}>\r\n        <Link to=\"/music\" href=\"#\">Music</Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"5\" icon={<SettingOutlined/>}>\r\n        <Link to=\"/settings\" href=\"#\">Settings</Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"6\" icon={<TeamOutlined/>}>\r\n        <Link to=\"/users\" href=\"#\">Users</Link>\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import { AppStateType } from '../redux-store';\r\n\r\nexport const getEmailState      = (state: AppStateType): string => state.auth.email || '';\r\nexport const getLoginState      = (state: AppStateType): string => state.auth.login || '';\r\nexport const getUserIdState     = (state: AppStateType): string => state.auth.userId || '';\r\nexport const getIsAuthState     = (state: AppStateType): boolean => state.auth.isAuth || false;\r\nexport const getCaptchaUrlState = (state: AppStateType): string => state.auth.captchaUrl || '';\r\n","import { AppStateType } from '../redux-store';\r\nimport { PostType, ProfileType } from '../../types';\r\n\r\nexport const getUserInfoState   = (state: AppStateType): Partial<ProfileType> => state.profilePage.userInfo || {};\r\nexport const getUserStatusState = (state: AppStateType): string => state.profilePage.userStatus;\r\nexport const getPostsData       = (state: AppStateType): PostType[] => state.profilePage.postsData;\r\nexport const getIsValid         = (state: AppStateType): boolean => state.profilePage.isValid;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { KEY_ENTER } from '../../../../utils/constants';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateUserStatus } from '../../../../redux/profile/reducer';\r\nimport { getUserStatusState } from '../../../../redux/profile/selector';\r\n\r\ninterface PropsType {\r\n  isOwner: boolean;\r\n}\r\n\r\nconst ProfileStatus: React.FC<PropsType> = ({ isOwner }) => {\r\n  const dispatch                      = useDispatch();\r\n  const status                        = useSelector(getUserStatusState);\r\n  const [editMode, setEditMode]       = useState(false);\r\n  const [statusState, setStatusState] = useState(status);\r\n\r\n  useEffect(() => {\r\n    setStatusState(status);\r\n  }, [status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(isOwner && true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    dispatch(updateUserStatus(statusState));\r\n  };\r\n\r\n  const handleChangeStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setStatusState(e.currentTarget.value);\r\n  };\r\n\r\n  const handleKeyUpEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === KEY_ENTER) {\r\n      deactivateEditMode();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode\r\n       ? <span onClick={activateEditMode}>{statusState || '---'}</span>\r\n       : <input value={statusState}\r\n                onBlur={deactivateEditMode}\r\n                onKeyUp={handleKeyUpEnter}\r\n                onChange={handleChangeStatus}\r\n                autoFocus={true}/>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatus;\r\n","import { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, Input, Textarea } from '../../../common/FormsControls/FormsControls';\r\nimport { required } from '../../../../utils/validators';\r\nimport React, { useEffect, useState } from 'react';\r\nimport classes from './ProfileData.module.css';\r\nimport { ContactsType, ProfileType } from '../../../../types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateUserData } from '../../../../redux/profile/reducer';\r\nimport { getIsValid } from '../../../../redux/profile/selector';\r\n\r\ninterface Props {\r\n  profileData: Partial<ProfileType>;\r\n  isOwner: boolean;\r\n}\r\n\r\ntype FormType = React.FC<InjectedFormProps<ProfileType>>;\r\ntype FormNames = Extract<keyof ProfileType, string>;\r\ntype ContactNames = Extract<keyof ContactsType, string>;\r\ntype FullContactNames = `contacts.${ContactNames}`;\r\n\r\nconst ProfileDataForm: FormType = ({ handleSubmit, error, initialValues }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={classes.form}>\r\n      Name: {createField<FormNames>('fullName', Input, [required], 'Full name')}\r\n      About me: {createField<FormNames>('aboutMe', Textarea, [required], 'About me')}\r\n      Looking for a job: {createField<FormNames>('lookingForAJob', Input, [], 'Looking for a job', 'checkbox')}\r\n      Skills: {createField<FormNames>('lookingForAJobDescription', Input, [required], 'Skills')}\r\n      Contacts:\r\n      <ul>\r\n        {!!initialValues.contacts && (Object.keys(initialValues.contacts) as Array<ContactNames>).map(key => (\r\n          <li key={key}>\r\n            {key}: {createField<FullContactNames>(`contacts.${key}`, Input, [], key)}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {error && <span className={classes.form__error}>{error}</span>}\r\n\r\n      <button type=\"submit\">Save</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType>({\r\n  form: 'profileData',\r\n})(ProfileDataForm);\r\n\r\nconst ProfileDataInfo: React.FC<Partial<ProfileType>> = ({\r\n                                                           fullName,\r\n                                                           aboutMe,\r\n                                                           lookingForAJob,\r\n                                                           lookingForAJobDescription,\r\n                                                           contacts\r\n                                                         }) => {\r\n  return (\r\n    <ul>\r\n      <li>\r\n        Name: {fullName}\r\n      </li>\r\n      <li>\r\n        About me: {aboutMe}\r\n      </li>\r\n      <li>\r\n        Looking for a job: {lookingForAJob}\r\n      </li>\r\n      <li>\r\n        Skills: {lookingForAJobDescription}\r\n      </li>\r\n      <li>\r\n        Contacts:\r\n        <ul>\r\n          {!!contacts && Object.entries(contacts).map(([key, value]) => (\r\n            <li key={key}>{key}: {value}</li>\r\n          ))}\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst ProfileData: React.FC<Props> = ({ profileData, isOwner }) => {\r\n  const dispatch                = useDispatch();\r\n  const isValid                 = useSelector(getIsValid);\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setEditMode(!isValid);\r\n  }, [isValid]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(isOwner && true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n  };\r\n\r\n  const handleClickOnEdit = () => {\r\n    if (editMode) {\r\n      deactivateEditMode();\r\n    }\r\n    else {\r\n      activateEditMode();\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (formData: ProfileType) => {\r\n    dispatch(updateUserData(formData));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleClickOnEdit}>Edit</button>\r\n      {editMode\r\n       ? <ProfileDataReduxForm initialValues={profileData}\r\n                               onSubmit={handleSubmit}/>\r\n       : <ProfileDataInfo {...profileData}/>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileData;\r\n","import React, { useRef } from 'react';\nimport classes from './UploadButton.module.css';\nimport { Button } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\n\ninterface UploadButtonProps {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst UploadButton: React.FC<UploadButtonProps> = ({ onChange, ...props }) => {\n  const input = useRef<HTMLInputElement>(null);\n\n  const handleClickButton = () => {\n    input.current?.click();\n  };\n\n  return <div>\n    <input ref={input} type=\"file\" onChange={onChange} className={classes.input}/>\n    <Button className={classes.button} onClick={handleClickButton}>\n      <UploadOutlined/> Click to Upload\n    </Button>\n  </div>;\n};\n\nexport default UploadButton;\n","import React from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport emptyAvatar from '../../../images/empty_avatar.svg';\r\nimport classes from './ProfileInfo.module.css';\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus';\r\nimport ProfileData from './ProfileData/ProfileData';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateUserPhoto } from '../../../redux/profile/reducer';\r\nimport { getUserInfoState } from '../../../redux/profile/selector';\r\nimport { Image } from 'antd';\r\nimport UploadButton from '../../common/UploadButton/UploadButton';\r\n\r\ninterface ProfileInfoProps {\r\n  userId: string;\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoProps> = ({ userId }) => {\r\n  const dispatch = useDispatch();\r\n  const userInfo = useSelector(getUserInfoState);\r\n  const isOwner  = userId === userInfo?.userId;\r\n\r\n  const handleChangePhoto = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      dispatch(updateUserPhoto(e.target.files[0]));\r\n    }\r\n  };\r\n\r\n  return (\r\n    userInfo\r\n    ? <div className={classes.info}>\r\n      <Image\r\n        width={256}\r\n        height={256}\r\n        src={userInfo?.photos?.large || emptyAvatar}\r\n        fallback={emptyAvatar}\r\n      />\r\n      {isOwner && <UploadButton onChange={handleChangePhoto}/>}\r\n      <ProfileStatus isOwner={isOwner}/>\r\n      <ProfileData profileData={userInfo} isOwner={isOwner}/>\r\n    </div>\r\n    : <Preloader/>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React, { createElement, useState } from 'react';\r\nimport { Avatar, Comment, Image, Tooltip } from 'antd';\r\nimport moment from 'moment';\r\nimport { DislikeOutlined, LikeOutlined, DislikeFilled, LikeFilled } from '@ant-design/icons';\r\nimport { useSelector } from 'react-redux';\r\nimport { getUserInfoState } from '../../../../redux/profile/selector';\r\n\r\ninterface PropsType {\r\n  message: string;\r\n}\r\n\r\ntype ActionTypes = null | 'liked' | 'disliked';\r\n\r\nconst Post: React.FC<PropsType> = ({ message }) => {\r\n  const profileInfo = useSelector(getUserInfoState);\r\n\r\n  const [likes, setLikes]       = useState(0);\r\n  const [dislikes, setDislikes] = useState(0);\r\n  const [action, setAction]     = useState<ActionTypes>(null);\r\n\r\n  const handleLike = () => {\r\n    setLikes(1);\r\n    setDislikes(0);\r\n    setAction('liked');\r\n  };\r\n\r\n  const handleDislike = () => {\r\n    setLikes(0);\r\n    setDislikes(1);\r\n    setAction('disliked');\r\n  };\r\n\r\n  const actions = [\r\n    <Tooltip key=\"post-like\" title=\"Like\">\r\n      <span onClick={handleLike}>\r\n        {createElement(action === 'liked' ? LikeFilled : LikeOutlined)}\r\n        <span className=\"comment-action\">{likes}</span>\r\n      </span>\r\n    </Tooltip>,\r\n    <Tooltip key=\"post-dislike\" title=\"Dislike\">\r\n      <span onClick={handleDislike}>\r\n        {createElement(action === 'disliked' ? DislikeFilled : DislikeOutlined)}\r\n        <span className=\"comment-action\">{dislikes}</span>\r\n      </span>\r\n    </Tooltip>,\r\n    <span key=\"comment-basic-reply-to\">Reply to</span>,\r\n  ];\r\n\r\n\r\n  return (\r\n    <Comment\r\n      actions={actions}\r\n      author={profileInfo.fullName}\r\n      avatar={<Avatar size=\"large\" src={<Image src={profileInfo.photos?.small} preview={false}\r\n                                               style={{ width: '100%', height: '100%' }}/>}/>}\r\n      content={\r\n        <p>\r\n          {message}\r\n        </p>\r\n      }\r\n      datetime={\r\n        <Tooltip title={moment().format('YYYY-MM-DD HH:mm:ss')}>\r\n          <span>{moment().fromNow()}</span>\r\n        </Tooltip>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getPostsData } from '../../../redux/profile/selector';\r\nimport { actions } from '../../../redux/profile/reducer';\r\nimport { Field, Formik } from 'formik';\r\nimport { Button, Form } from 'antd';\r\nimport { AntTextArea } from '../../common/AntField/AntField';\r\nimport classes from './MyPosts.module.css';\r\n\r\ninterface FieldsType {\r\n  newPost: string;\r\n}\r\n\r\ninterface FormPropsType {\r\n  handleSubmit: (newPost: string) => void;\r\n  initialValues?: FieldsType;\r\n}\r\n\r\nconst isRequired = (value: string) => !value ? 'Required!' : '';\r\n\r\nconst MyPostsForm: React.FC<FormPropsType> = ({ handleSubmit, initialValues = { newPost: '' } }) => {\r\n\r\n  return (\r\n    <Formik\r\n      onSubmit={async (values, { setSubmitting }) => {\r\n        await handleSubmit(values.newPost);\r\n        setSubmitting(false);\r\n      }}\r\n      initialValues={initialValues}\r\n    >\r\n      {({ isSubmitting, submitForm }) => (\r\n        <Form onFinish={submitForm} className={classes.form}>\r\n          <Field\r\n            component={AntTextArea}\r\n            name=\"newPost\"\r\n            type=\"input\"\r\n            as=\"textarea\"\r\n            validate={isRequired}\r\n            placeholder=\"Write new post...\"\r\n            hasFeedback\r\n            showCount\r\n            allowClear\r\n          />\r\n          <Button type=\"primary\" htmlType=\"submit\" disabled={isSubmitting}\r\n                  className={classes.form__submit}>Post</Button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst MyPosts: React.FC = React.memo(() => {\r\n  const dispatch = useDispatch();\r\n\r\n  const postsData     = useSelector(getPostsData);\r\n  const postsElements = postsData.map(({ id, message }) => <Post key={id} message={message}/>);\r\n  const handleAddPost = (newPost: string) => {\r\n    dispatch(actions.addPost(newPost));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.posts}>\r\n      <MyPostsForm handleSubmit={handleAddPost}/>\r\n      <div>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MyPosts;\r\n","import React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getUserInfo, getUserStatus, } from '../../redux/profile/reducer';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { getUserIdState } from '../../redux/auth/selector';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport classes from './ProfilePage.module.css';\r\n\r\nconst ProfilePage: React.FC = () => {\r\n  const history  = useHistory();\r\n  const dispatch = useDispatch();\r\n  const params   = useParams<{ userId: string }>();\r\n  const userId     = useSelector(getUserIdState);\r\n  const refUserId  = useRef(userId);\r\n\r\n  const refreshProfileInfo = useCallback(() => {\r\n    refUserId.current = params.userId || refUserId.current || '';\r\n\r\n    if (!refUserId.current) {\r\n      history.push('/login');\r\n    }\r\n\r\n    dispatch(getUserInfo(refUserId.current));\r\n    dispatch(getUserStatus(refUserId.current));\r\n  }, [params, dispatch, history]);\r\n\r\n  useEffect(() => {\r\n    refreshProfileInfo();\r\n  }, [refreshProfileInfo]);\r\n\r\n  useEffect(() => {\r\n    refreshProfileInfo();\r\n  }, [params, refreshProfileInfo]);\r\n\r\n  return (\r\n    <main className={classes.main}>\r\n      <ProfileInfo userId={userId}/>\r\n      <MyPosts/>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import { Redirect, Route, RouteComponentProps } from 'react-router';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n  path: string;\r\n  render: (props: RouteComponentProps) => React.ReactNode\r\n  condition: boolean;\r\n  to: string;\r\n}\r\n\r\nconst ProtectedRoute: React.FC<Props> = ({ path, render, condition, to }) => {\r\n  return condition\r\n         ? <Route path={path} render={render}/>\r\n         : <Redirect to={to}/>;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n","import { AppStateType } from '../redux-store';\r\n\r\nexport const getInitializedState = (state: AppStateType) => state.app.initialized;\r\n","import React, { Suspense } from 'react';\r\nimport Preloader from '../components/common/Preloader/Preloader';\r\n\r\nfunction withSuspense<WCP>(Component: React.ComponentType<WCP>) {\r\n  return (props: WCP) => {\r\n    return <Suspense fallback={<Preloader/>}>\r\n      <Component {...props}/>\r\n    </Suspense>;\r\n  };\r\n}\r\n\r\nexport default withSuspense;\r\n","import { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport React from 'react';\r\nimport { createField, Input } from '../common/FormsControls/FormsControls';\r\nimport { maxLength30, required } from '../../utils/validators';\r\nimport { useHistory } from 'react-router';\r\nimport classes from './LoginPage.module.css';\r\nimport { LoginPropsType } from '../../types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getCaptchaUrlState, getIsAuthState } from '../../redux/auth/selector';\r\nimport { login } from '../../redux/auth/reducer';\r\n\r\ninterface LoginFormProps {\r\n  captchaUrl: string;\r\n}\r\n\r\ntype LoginFormType = React.FC<InjectedFormProps<LoginPropsType, LoginFormProps> & LoginFormProps>;\r\n\r\ntype LoginFieldNames = Extract<keyof LoginPropsType, string>;\r\n\r\nconst LoginForm: LoginFormType = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={classes.form}>\r\n      {createField<LoginFieldNames>('email', Input, [required, maxLength30], 'Email')}\r\n      {createField<LoginFieldNames>('password', Input, [required, maxLength30], 'Password', 'password')}\r\n      <div>\r\n        {createField<LoginFieldNames>('rememberMe', Input, [], '', 'checkbox')}\r\n        remember me\r\n      </div>\r\n      {!!captchaUrl && (\r\n        <div>\r\n          <img src={captchaUrl} alt=\"captcha\"/>\r\n          {createField<LoginFieldNames>('captcha', Input, [], 'Text from image')}\r\n        </div>\r\n      )}\r\n      {error && <span className={classes.form__error}>{error}</span>}\r\n      <button type=\"submit\">Login</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginPropsType, LoginFormProps>({ form: 'login' })(LoginForm);\r\n\r\nconst LoginPage: React.FC = () => {\r\n\r\n  const history  = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const isAuth     = useSelector(getIsAuthState);\r\n  const captchaUrl = useSelector(getCaptchaUrlState);\r\n\r\n  const handleSubmit = (formData: LoginPropsType) => {\r\n    dispatch(login(formData));\r\n  };\r\n\r\n  if (isAuth) {\r\n    history.push('/profile');\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>LOGIN</h1>\r\n      <LoginReduxForm onSubmit={handleSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","export default __webpack_public_path__ + \"static/media/logo.620308a0.svg\";","import React from 'react';\nimport { Image } from 'antd';\nimport logo from '../../images/logo.svg';\nimport classes from './Logo.module.css';\n\nconst Logo: React.FC = () => {\n  return (\n    <div className={classes.logo}>\n      <Image preview={false} src={logo} height={'100%'}/>\n    </div>\n  );\n};\n\nexport default Logo;\n","import React from 'react';\r\nimport { Layout, Button, Row, Col } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getIsAuthState, getLoginState } from '../../redux/auth/selector';\r\nimport { logout } from '../../redux/auth/reducer';\r\nimport classes from './Header.module.css';\r\n\r\nconst { Header: AntdHeader } = Layout;\r\n\r\nconst Header: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const login  = useSelector(getLoginState);\r\n  const isAuth = useSelector(getIsAuthState);\r\n\r\n  const handleLogout = () => dispatch(logout());\r\n\r\n  return (\r\n    <AntdHeader className=\"site-layout-background\">\r\n      <Row justify=\"end\" gutter={10}>\r\n        {isAuth\r\n         ? (\r\n           <>\r\n             <Col>\r\n               <p className={classes.header__login}>{login}</p>\r\n             </Col>\r\n             <Col>\r\n               <Button onClick={handleLogout}>Log out</Button>\r\n             </Col>\r\n           </>\r\n         )\r\n         : (\r\n           <Col>\r\n             <Button>\r\n               <Link to=\"/login\">Login</Link>\r\n             </Button>\r\n           </Col>\r\n         )}\r\n      </Row>\r\n    </AntdHeader>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport React, { lazy } from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport Navbar from '../Navbar/Navbar';\r\nimport ProfilePage from '../Profile/ProfilePage';\r\nimport ProtectedRoute from '../../hoc/ProtectedRoute';\r\nimport { compose } from 'redux';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\nimport { initializing } from '../../redux/app/reducer';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { getInitializedState } from '../../redux/app/selector';\r\nimport { getIsAuthState } from '../../redux/auth/selector';\r\nimport withSuspense from '../../hoc/withSuspense';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport LoginPage from '../Login/LoginPage';\r\n\r\nimport { Breadcrumb, Layout } from 'antd';\r\nimport Logo from '../Logo/Logo';\r\nimport Header from '../Header/Header';\r\n\r\nconst { Content, Footer, Sider } = Layout;\r\n\r\nconst DialogsContainer = lazy(() => import('../Dialogs/DialogsContainer').then(DialogsContainer => DialogsContainer));\r\nconst UsersPage        = lazy(() => import('../Users/UsersPage').then(UsersPage => UsersPage));\r\n\r\ninterface StatePropsType {\r\n  isAuth: boolean;\r\n  initialized: boolean;\r\n}\r\n\r\ninterface DispatchPropsType {\r\n  initializing: () => void;\r\n}\r\n\r\ninterface OwnProps {\r\n}\r\n\r\ntype PropsType = ConnectedProps<typeof connector>;\r\n\r\nconst mapStateToProps = (state: AppStateType): StatePropsType => ({\r\n  isAuth:      getIsAuthState(state),\r\n  initialized: getInitializedState(state),\r\n});\r\n\r\nconst mapDispatchToProps: DispatchPropsType = {\r\n  initializing,\r\n};\r\n\r\nconst connector = connect<StatePropsType, DispatchPropsType, OwnProps, AppStateType>(mapStateToProps, mapDispatchToProps);\r\n\r\nconst Dialogs = withSuspense(DialogsContainer);\r\nconst Users   = withSuspense(UsersPage);\r\n\r\nclass App extends React.Component<PropsType> {\r\n  state = {\r\n    collapsed: false,\r\n  };\r\n\r\n  onCollapse = (collapsed: boolean) => {\r\n    console.log(collapsed);\r\n    this.setState({ collapsed });\r\n  };\r\n\r\n  componentDidMount () {\r\n    this.props.initializing();\r\n  }\r\n\r\n  render () {\r\n    let { isAuth, initialized } = this.props;\r\n    const { collapsed }         = this.state;\r\n\r\n    return initialized\r\n           ? (\r\n             <Layout style={{ minHeight: '100vh' }}>\r\n               <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\r\n                 <Logo/>\r\n                 <Navbar/>\r\n               </Sider>\r\n               <Layout className=\"site-layout\">\r\n                 <Header/>\r\n                 <Content style={{ margin: '0 16px' }}>\r\n                   <Breadcrumb style={{ margin: '16px 0' }}>\r\n                     <Breadcrumb.Item>User</Breadcrumb.Item>\r\n                     <Breadcrumb.Item>Bill</Breadcrumb.Item>\r\n                   </Breadcrumb>\r\n                   <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\r\n                     <Switch>\r\n                       <Redirect exact from=\"/\" to=\"/profile\"/>\r\n                       <Route path=\"/login\">\r\n                         <LoginPage/>\r\n                       </Route>\r\n                       <Route path=\"/profile/:userId?\">\r\n                         <ProfilePage/>\r\n                       </Route>\r\n                       <ProtectedRoute path=\"/messages\"\r\n                                       condition={isAuth}\r\n                                       to={'/login'}\r\n                                       render={() => <Dialogs/>}/>\r\n                       <ProtectedRoute path=\"/users\"\r\n                                       condition={isAuth}\r\n                                       to={'/login'}\r\n                                       render={() => <Users/>}/>\r\n                       <Route path=\"/error\">\r\n                         <div>\r\n                           ERROR 404 =D\r\n                         </div>\r\n                       </Route>\r\n                       <Redirect to=\"/error\"/>\r\n                     </Switch>\r\n                   </div>\r\n                 </Content>\r\n                 <Footer\r\n                   style={{ textAlign: 'center' }}>{`ForRest©${new Date().getFullYear()} Created by Aleksey Popov`}</Footer>\r\n               </Layout>\r\n             </Layout>\r\n           )\r\n           : <Preloader/>;\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  withRouter,\r\n  connector,\r\n)(App);\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport store from './redux/redux-store';\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App/>\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","const required = (value: any): string | void => value\r\n                                                ? undefined\r\n                                                : 'Required field';\r\n\r\nconst maxLength = (max: number) => (value: string): string | void => value && value.length > max\r\n                                                                     ? `Max length is ${max}`\r\n                                                                     : undefined;\r\n\r\nconst maxLength30 = maxLength(30);\r\n\r\nexport {\r\n  required,\r\n  maxLength,\r\n  maxLength30,\r\n};\r\n","export default __webpack_public_path__ + \"static/media/loader.2e72bf7b.gif\";","import preloader from '../../../images/loader.gif';\r\nimport React from 'react';\r\n\r\nconst Preloader: React.FC = () => {\r\n  return <img src={preloader} alt=\"Loader\"/>;\r\n};\r\n\r\nexport default Preloader;\r\n"],"sourceRoot":""}